package udp
public
  with Base_Types;
  with TB_SYS;
  with Data_Model;
  
  data udp_buffer
  end udp_buffer;
  
  data implementation udp_buffer.i_4096
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
      Data_Model::Dimension => (4096);
  end udp_buffer.i_4096;

  data packet
  end packet;
  
  data implementation packet.i
    subcomponents
      len: data Base_Types::Integer_32;
      buffer: data udp_buffer.i_4096;
      addr: data Base_Types::Integer_32;
      -- port will be hard coded as configuration data
  end packet.i;
  
  thread udp
    features
      client_input: in event data port packet.i;
      client_output: out event data port packet.i;

    properties
      TB_SYS::Is_External => true;
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0ms .. 50ms;
      Dispatch_Protocol => Sporadic;
  end udp;

  
  --
  -- Code to exercise the UDP
  --
  
  thread echo
    features
      input: in event data port packet.i;
      output: out event data port packet.i;
      
    properties
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0ms .. 50ms;
      Dispatch_Protocol => Sporadic;
      Source_Text => ("user_code/echo.c");

      TB_SYS::Sends_Events_To => "{{1 output}}";
      Compute_Entrypoint_Source_Text => "receive" applies to input;
  end echo;

  process proc
  end proc;
  
  process implementation proc.i
    subcomponents
      udp: thread udp;
      echo: thread echo;
      
    connections
      udp_to_echo: port udp.client_output -> echo.input;
      echo_to_udp: port echo.output -> udp.client_input;
  end proc.i;
  
  system wrapper
  end wrapper;
  
  system implementation wrapper.i
    subcomponents
      proc: process proc.i;
      
    properties
      TB_SYS::OS => CAmkES;
      TB_SYS::HW => QEMU;
  end wrapper.i;
  
end udp;
