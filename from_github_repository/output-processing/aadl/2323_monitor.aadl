package dm::legacy::monitor

public


with dm::legacy::types;

--
--  Each engine reports a value from a sensor
--  and a voter check for a potential inconsistency
--  and output an appropriate value.

thread engine_sensor
features
	status : out data port dm::legacy::types::engine_status;
properties
	dispatch_protocol => periodic;
	period => 100 ms;
end engine_sensor;

thread implementation engine_sensor.i
calls
	call : { c : subprogram engine_sensor_simulate;};
connections
	c0 : parameter c.status -> status;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end engine_sensor.i;

subprogram engine_sensor_simulate
features 
	status : out parameter dm::legacy::types::engine_status;
properties 
    source_name => "simulate_engine";
    source_language => (C);
    source_text => ("../functional-code/engine.h","../functional-code/engine.c");
end engine_sensor_simulate;


thread engines_status
features
	engine1 : in data port dm::legacy::types::engine_status;
	engine2 : in data port dm::legacy::types::engine_status;
	status  : out data port dm::legacy::types::engines_status.i;
properties
	dispatch_protocol => periodic;
	period => 200 ms;
end engines_status;

thread implementation engines_status.i
calls
	call : { c : subprogram engines_status_voter;};
connections
	c0 : parameter c.engine1 -> engine1;
	c1 : parameter c.engine2 -> engine2;
	c2 : parameter status -> c.status;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end engines_status.i;

subprogram engines_status_voter
features
	engine1 : in parameter dm::legacy::types::engine_status;
	engine2 : in parameter dm::legacy::types::engine_status;
	status  : out parameter dm::legacy::types::engines_status.i;
properties 
    source_name => "engines_status_voter";
    source_language => (C);
    source_text => ("../functional-code/engine.h","../functional-code/engine.c");
end engines_status_voter;

-- 
--  A pitot sensor is 

thread pitot_sensor
features
	pitot_value : out data port dm::legacy::types::pitot_val;
properties
	dispatch_protocol => periodic;
	period => 200 ms;
end pitot_sensor;

subprogram pitot_simulate
features 
	pitot_value : out parameter dm::legacy::types::pitot_val;
properties 
    source_name => "pitot_simulate";
    source_language => (C);
    source_text => ("../functional-code/pitot.h","../functional-code/pitot.c");
end pitot_simulate;

thread implementation pitot_sensor.i
calls
	call : { c : subprogram pitot_simulate;};
connections
	c0 : parameter c.pitot_value -> pitot_value;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end pitot_sensor.i;


thread pitot_status
features
 	pitot1_sensed : in data port dm::legacy::types::pitot_val;
 	pitot2_sensed : in data port dm::legacy::types::pitot_val;
	status : out data port  dm::legacy::types::pitot_status.i;
properties
	dispatch_protocol => periodic;
	period => 200 ms;
end pitot_status;


thread implementation pitot_status.i
calls
	call : { c : subprogram pitot_status_compute;};
connections
	c0 : parameter c.status -> status;
	c1 : parameter pitot1_sensed -> c.pitot1_sensed;
	c2 : parameter pitot2_sensed -> c.pitot2_sensed;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end pitot_status.i;

subprogram pitot_status_compute
features
 	pitot1_sensed : in parameter dm::legacy::types::pitot_val;
 	pitot2_sensed : in parameter dm::legacy::types::pitot_val;
	status : out parameter  dm::legacy::types::pitot_status.i;
properties 
    source_name => "pitot_status_compute";
    source_language => (C);
    source_text => ("../functional-code/pitot.h","../functional-code/pitot.c");
end pitot_status_compute;


thread fuel_gauge
features
	level : out data port dm::legacy::types::fuel_level;
properties
	dispatch_protocol => periodic;
	period => 200 ms;
end fuel_gauge;

thread implementation fuel_gauge.i
calls
	call : { c : subprogram fuel_gauge_simulate;};
connections
	c0 : parameter c.level -> level;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end fuel_gauge.i;

subprogram fuel_gauge_simulate
features
	level : out parameter  dm::legacy::types::fuel_level;
properties 
    source_name => "fuel_gauge_simulate";
    source_language => (C);
    source_text => ("../functional-code/fuel_gauge.h","../functional-code/fuel_gauge.c");
end fuel_gauge_simulate;


thread fuel_status 
features
 	level1 : in data port dm::legacy::types::fuel_level;
 	level2 : in data port dm::legacy::types::fuel_level;
	status : out data port  dm::legacy::types::fuel_status.i;
properties
	dispatch_protocol => periodic;
	period => 200 ms;
end fuel_status;

thread implementation fuel_status.i
calls
	call : { c : subprogram fuel_status_calculate;};
connections
	c0 : parameter c.status -> status;
	c1 : parameter level1 -> c.level1;
	c2 : parameter level2 -> c.level2;
properties
	Compute_Entrypoint_Call_Sequence => reference (call);
end fuel_status.i;

subprogram fuel_status_calculate
features
 	level1 : in parameter dm::legacy::types::fuel_level;
 	level2 : in parameter dm::legacy::types::fuel_level;
	status : out parameter dm::legacy::types::fuel_status.i;
properties 
    source_name => "fuel_status_calculate";
    source_language => (C);
    source_text => ("../functional-code/fuel_gauge.h","../functional-code/fuel_gauge.c");
end fuel_status_calculate;

process monitor
features
	engines_status : out data port dm::legacy::types::engines_status.i;
	pitot_status   : out data port dm::legacy::types::pitot_status.i;
	fuel_status    : out data port dm::legacy::types::fuel_status.i;
end monitor;

process implementation monitor.i
subcomponents
	engine1 : thread engine_sensor.i;
	engine2 : thread engine_sensor.i;
	pitot1  : thread pitot_sensor.i;
	pitot2  : thread pitot_sensor.i;
	fuel1   : thread fuel_gauge.i;
	fuel2   : thread fuel_gauge.i;
	engines : thread engines_status.i;
	pitots  : thread pitot_status.i; 
	fuels   : thread  fuel_status.i;
connections
	cin0 : port engine1.status -> engines.engine1;
	cin1 : port engine2.status -> engines.engine2;
	
	cin2 : port pitot1.pitot_value -> pitots.pitot1_sensed;
	cin3 : port pitot2.pitot_value -> pitots.pitot2_sensed;
	
	cin4 : port fuel1.level -> fuels.level1;
	cin5 : port fuel2.level -> fuels.level2;
	
	cout0 : port engines.status -> engines_status;
	cout1 : port pitots.status -> pitot_status;
	cout2 : port fuels.status -> fuel_status;
end monitor.i;

end dm::legacy::monitor;