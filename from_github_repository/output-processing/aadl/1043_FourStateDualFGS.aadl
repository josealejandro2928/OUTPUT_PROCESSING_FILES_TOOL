package FourStateDualFGS
public
-- in this model we do not use operational modes
-- we distinguish between critical and non-critical failures through different error states
system FG
features
InPort: in data port;
OutPort: out data port;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	OutPort: out propagation {NoValue};
	end propagations;
	
component error behavior
    propagations  
       Failed-[]->Outport{NoValue};
   end component; 
	**};
end FG;
system AP
features
InPort: in data port;
OutPort: out data port;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	InPort: in propagation {NoValue};
	OutPort: out propagation {NoValue};
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->Outport{NoValue};
      Operational -[Inport{NoValue}]-> OutPort{NoValue};
   end component; 
	**};
end AP;

-- AC contains logic to determine critical or non-critical failure
-- This gets reflected as the corresponding error state
system AC
features
FromAP1Port: in data port;
FromAP2Port: in data port;
OutPort: out data port;
annex emv2 {**
  use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::ACThreeState; 
  error propagations
      FromAP1Port: in propagation {NoValue};
      FromAP2Port: in propagation {NoValue};
      OutPort: out propagation {NoValue};
   end propagations;
	
component error behavior
transitions
-- non-critical mode failure occurs when both FG/AP channels have failed. In non-critical mode one operational channel is sufficient.
  Operational -[FromAP1Port{NoValue} and FromAP2Port{NoValue}]-> TwoChannelFailure;
-- critical model failure occurs when one channel fails. In critical mode both channels must operate.
  Operational -[FromAP1Port{NoValue} or FromAP2Port{NoValue}]-> OneChannelFailure;
propagations  
  TwoChannelFailure-[]->Outport{NoValue};
  OneChannelFailure-[]->Outport{NoValue};
end component;
**};
end AC;

system FGS
features
inport : in data port;
outport: out data port;
goCritical: in event port;
goNonCritical: in event port;
powersupply : requires bus access PowerSupply;
annex emv2 {**
  use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::FourState;
  error propagations
	inport: in propagation {NoValue};
	outport : out propagation {NoValue};
	powersupply: in propagation {NoService};
  flows
	esource1: error source outport{NoValue} when CriticalModefailure;
	esource2: error source outport{NoValue} when NonCriticalModeFailure;
	ePath: error path inport{NoValue} -> outport{NoValue};
	epPower: error path powersupply{NoService} -> outport{NoValue};
	end propagations;
	**};
end FGS;

system implementation FGS.fourstate
subcomponents
AP1: system AP;
AP2: system AP;
FG1: system FG;
FG2: system FG;
AC: system AC;
connections
FGStoFG1: port inport -> FG1.inport;
FGStoFG2: port inport -> FG2.inport;
FG1toAP1: port FG1.outport -> AP1.inport;
FG2toAP2: port FG1.outport -> AP2.inport;
AP1toAC: port AP1.outport -> AC.FromAP1Port;
AP2toAC: port AP2.outport -> AC.FromAP2Port;
ACtoFGS: port AC.outport -> outport;
annex emv2 {**
  use types FGSErrorModelLibrary;        
  use behavior FGSErrorModelLibrary::FourState;
component error behavior
transitions
  trans1: Operational -[powersupply{NoService}]-> FailStop;
end component;
composite error behavior 
-- the AC error states determine the error states of FGS
-- in addition power failure results in a FailStop state
 states
    [AC.Operational]->Operational ;
    [AC.TwoChannelFailure]->NoncriticalModeFailure ;
    [AC.OneChannelFailure]->CriticalModefailure ;
end composite;
**};
end FGS.fourstate;


bus PowerSupply
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	access: out propagation {NoService};
	flows
	esource: error source access{NoService} when Failed;
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->access{NoService};
   end component; 
	**};
end PowerSupply;

bus EtherSwitch
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	bindings: out propagation {NoService};
	flows
	esource: error source bindings{NoService} when Failed;
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->bindings{NoService};
   end component; 
	**};
end EtherSwitch;

end FourStateDualFGS;