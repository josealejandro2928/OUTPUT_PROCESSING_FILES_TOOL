package can
public
  with Base_Types;
  with TB_SYS;
  with Data_Model;

  data can_frame
  end can_frame;

  data implementation can_frame.i
    subcomponents
      id: data Base_Types::Unsigned_32; -- CAN id (11 bits for standard frame, 29 bits if extended frame)
      dlc: data Base_Types::Unsigned_8; -- Data Length Code (0 ~ 8)
      payload: data can_payload.i;      -- Frame payload (8 bytes maximum)
  end can_frame.i;

  data can_payload
  end can_payload;

  data implementation can_payload.i
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
      Data_Model::Dimension => (8);
  end can_payload.i;

  thread can_node
    features
      send_0: in event data port can_frame.i;
      send_1: in event data port can_frame.i;
      send_2: in event data port can_frame.i;
      
      abort_0: in event port;
      abort_1: in event port;
      abort_2: in event port;
      
      recv: out event data port can_frame.i;
      status_0: out event data port Base_Types::Boolean;
      status_1: out event data port Base_Types::Boolean;
      status_2: out event data port Base_Types::Boolean;
      
      -- Do we need filtering?
      -- Do we need send without a specific buffer?
      -- Do we really need abort?
      -- If you abort a send, what behavior do we expect on status?

    properties
      TB_SYS::Is_External => true;
      TB_SYS::Thread_Type => Active;
      Period => 10 ms;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
  end can_node;

  --
  -- Code to exercise the CAN
  --
  thread sender
    features
      output: out event data port can_frame.i;
      status_0: in event data port Base_Types::Boolean;
      status_1: in event data port Base_Types::Boolean;
      status_2: in event data port Base_Types::Boolean;
      abort: out event port;

    properties
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Periodic;
      Source_Text => ("user_code/sender.c");
      Period => 100 ms; -- note; this is garbage; I don't know the real period

      TB_SYS::Sends_Events_To => "{{1 output}}";
      Compute_Entrypoint_Source_Text => "send";
      Compute_Entrypoint_Source_Text => "recvStatus" applies to status_0;
  end sender;
  
  
  thread receiver
    features
      input: in event data port can_frame.i;

    properties
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
      Source_Text => ("user_code/receiver.c");

      TB_SYS::Sends_Events_To => "{{1 output}}";
      Compute_Entrypoint_Source_Text => "receive" applies to input;
  end receiver;

  process proc
  end proc;

  process implementation proc.i
    subcomponents
      can_node: thread can_node;
      sender: thread sender;
      receiver: thread receiver;

    connections
      send_conn: port sender.output -> can_node.send_0;
      status_0_conn: port can_node.status_0 -> sender.status_0;
      abort_conn: port sender.abort -> can_node.abort_0;
      
      -- These two lines need to be here just so that the right CAmkES connections are created
      status_1_conn: port can_node.status_1 -> sender.status_1;
      status_2_conn: port can_node.status_2 -> sender.status_2;
      
      recv: port can_node.recv -> receiver.input;
  end proc.i;

  system wrapper
  end wrapper;

  system implementation wrapper.i
    subcomponents
      proc: process proc.i;

    properties
      TB_SYS::OS => CAmkES;
      TB_SYS::HW => ODROID;
  end wrapper.i;

end can;
