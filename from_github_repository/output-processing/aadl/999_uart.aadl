package uart
public
  with Base_Types;
  with TB_SYS;
  with Data_Model;
  
  data packet
  end packet;
  
  data implementation packet.i
    subcomponents
      payload: data payload.i;
      length: data Base_Types::Unsigned_8;
  end packet.i;

  data payload
  end payload;

  data implementation payload.i
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
      Data_Model::Dimension => (255);
  end payload.i;

  thread uart
    features
      send: in event data port packet.i;
      completed: out event port;
      recv: out event data port Base_Types::Unsigned_8;
      
    properties
    	TB_SYS::Is_External => true;
    	TB_SYS::Thread_Type => Active;
    	Priority => 11;
    	Stack_Size => 1 KByte;
    	Compute_Execution_Time => 0ms .. 50ms;
    	Dispatch_Protocol => Sporadic;
  end uart;

  
  --
  -- Code to exercise the UART
  --
  
  thread sender
    features
      output: out event data port packet.i;
      completed: in event port;
      
    properties
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0ms .. 50ms;
      Dispatch_Protocol => Periodic;
      Period => 2000 ms;
      Source_Text => ("user_code/sender.c");
      Compute_Entrypoint_Source_Text => "send";
      TB_SYS::Sends_Events_To => "{{1 output}}";
      
      Compute_Entrypoint_Source_Text => "notify" applies to completed;
  end sender;
  
  thread receiver
    features
      input: in event data port Base_Types::Unsigned_8;
      
    properties
      TB_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0ms .. 50ms;
      Dispatch_Protocol => Sporadic;

      Source_Text => ("user_code/receiver.c");
      Compute_Entrypoint_Source_Text => "receive" applies to input;
  end receiver;
  
  process proc
  end proc;
  
  process implementation proc.i
    subcomponents
      uart: thread uart;
      sender: thread sender;
      receiver: thread receiver;
  		
    connections
      sender_to_uart: port sender.output -> uart.send;
      uart_to_sender: port uart.completed -> sender.completed;
      uart_to_receiver: port uart.recv -> receiver.input;
  end proc.i;
  
  system wrapper
  end wrapper;
  
  system implementation wrapper.i
    subcomponents
      proc: process proc.i;
      
    properties
      TB_SYS::OS => CAmkES;
      TB_SYS::HW => ODROID;
  end wrapper.i;
  
end uart;
