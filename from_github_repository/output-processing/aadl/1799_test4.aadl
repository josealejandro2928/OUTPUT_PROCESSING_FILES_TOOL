-- AADL Test 4: active -> active threads using scalar send.

package test4
public 
   with Base_Types;
   with TB_SYS;   
   with Data_Model;


data a_struct
  properties
    Data_Model::Data_Representation => Struct;
end a_struct;

data implementation a_struct.impl
  subcomponents
    field1 : data Base_Types::Float;
    field2 : data Base_Types::Float;
end a_struct.impl;

-- Example of a periodically dispatched "Active" thread.   
thread sender1
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 20;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender1 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender2
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 19;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender2 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender3
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 18;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender3 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender4
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 17;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender4 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender5
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 16;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender5 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender6
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 15;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender6 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender7
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 14;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender7 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender8
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 13;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender8 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender9
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 12;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender9 ; 

-- Example of a periodically dispatched "Active" thread.   
thread sender10
   features
      Output1: out event data port Base_Types::Unsigned_32 {
         TB_SYS::CommPrim_Source_Text => "ping_Output1";       
      };
   
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 20 ms;
       Source_Text => ("user_code/user_sender.c", "user_code/opt_main.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
       Priority => 11;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender10 ; 

-- Example of a periodically dispatched "Active" thread.   
thread receiver
   features
      Input1: in event data port Base_Types::Unsigned_32 {
        -- TB_SYS::Compute_Entrypoint_Source_Text => ("ping_received");
        Queue_Size => 4096;
      }; 
      
   properties 
       Dispatch_Protocol => Periodic;
       TB_SYS::Thread_Type => Active ;
       Period => 1000 ms;
      Source_Text => ("user_code/user_receiver.c");
       TB_SYS::Compute_Entrypoint_Source_Text => ("receiver_periodic_ping");
       Priority => 8;
       Stack_Size => 4096 bytes;
       Compute_Execution_Time => 10 us .. 50 us;
       TB_SYS::Sends_Events_To => "{{}}";
end receiver ; 

process proc

end proc;

process implementation proc.Impl
   subcomponents
      s1: thread sender1;
      s2: thread sender2;
      s3: thread sender3;
      s4: thread sender4;
      s5: thread sender5;
      s6: thread sender6;
      s7: thread sender7;
      s8: thread sender8;
      s9: thread sender9;
      s10: thread sender10;
      r: thread receiver;
   connections
      s1_to_r : port s1.Output1 -> r.Input1;
      s2_to_r : port s2.Output1 -> r.Input1;
      s3_to_r : port s3.Output1 -> r.Input1;
      s4_to_r : port s4.Output1 -> r.Input1;
      s5_to_r : port s5.Output1 -> r.Input1;
      s6_to_r : port s6.Output1 -> r.Input1;
      s7_to_r : port s7.Output1 -> r.Input1;
      s8_to_r : port s8.Output1 -> r.Input1;
      s9_to_r : port s9.Output1 -> r.Input1;
      s10_to_r : port s10.Output1 -> r.Input1;
end proc.Impl;

processor main     
end main;

processor implementation main.camkes
   properties
      TB_SYS::OS => camkes;
      TB_SYS::HW => x86;
end main.camkes;

processor implementation main.linux
   properties
      TB_SYS::OS => linux;
      TB_SYS::HW => X86;
end main.linux;

processor implementation main.vxworks
   properties
      TB_SYS::OS => vxworks;
      TB_SYS::HW => x86;
end main.vxworks;

processor implementation main.echronos
   properties
      TB_SYS::OS => echronos;
      TB_SYS::HW => pixhawk;
end main.echronos;

system test
end test;

system implementation test.camkes
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.camkes;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.camkes;

system implementation test.echronos
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.echronos;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.echronos;

system implementation test.vxworks
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.vxworks;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.vxworks;

system implementation test.linux
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.linux;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.linux;

end test4;