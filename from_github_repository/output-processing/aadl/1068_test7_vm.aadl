-- AADL Test 7: active -> active threads using scalar read/write.

package test7_vm
public 
   with Base_Types;
   with TB_SYS;   
   with Data_Model;
   with Deployment;

data a_struct
  properties
    Data_Model::Data_Representation => Struct;
end a_struct;

data implementation a_struct.impl
  subcomponents
    field1 : data Base_Types::Float;
    field2 : data Base_Types::Float;
end a_struct.impl;

-- Example of a periodically dispatched "Active" thread.   
thread sender
	features
		Output1: out data port Base_Types::Unsigned_32 {
	      TB_SYS::CommPrim_Source_Text => "ping_Output1";			
		};
	
	properties 
	    Dispatch_Protocol => Periodic;
	    TB_SYS::Thread_Type => Active ;
	    Period => 1000 ms;
		Source_Text => ("user_code/user_sender.c", "user_code/tb_main.c");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("sender_periodic_ping");
	    Priority => 10;
	    Stack_Size => 256 bytes;
	    Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{1 Output1}}";
end sender ; 

-- Example of a periodically dispatched "Active" thread.   
thread receiver
	features
		Input1: in data port Base_Types::Unsigned_32 {
	      TB_SYS::CommPrim_Source_Text => "ping_Input1";			
	      -- TB_SYS::Compute_Entrypoint_Source_Text => ("ping_received");
		  --Queue_Size => 8;
		}; 
		
	properties 
	    Dispatch_Protocol => Periodic;
	    TB_SYS::Thread_Type => Active ;
	    Period => 1000 ms;
		Source_Text => ("user_code/user_receiver.c");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("receiver_periodic_ping");
	    Priority => 8;
	    Stack_Size => 256 bytes;
	    Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{}}";
end receiver ; 

process proc_sender
	features
		Output1: out data port Base_Types::Unsigned_32;

end proc_sender;

process implementation proc_sender.Impl
	subcomponents
		s: thread sender;
	connections
		s_to_out : port s.Output1 -> Output1;
end proc_sender.Impl;

process proc_receiver
	features
		Input1: in data port Base_Types::Unsigned_32;

end proc_receiver;

-- define new attributes for VM?

process implementation proc_receiver.Impl
	subcomponents
		r: thread receiver;
	connections
		in_to_r : port Input1 -> r.Input1;
end proc_receiver.Impl;


virtual processor linux_vm
end linux_vm;

virtual processor implementation linux_vm.impl
   properties
      TB_SYS::OS => linux;
      TB_SYS::HW => QEMU;
      -- Frame_Period => 500 ms;
      -- Slot_Time => 100 us; 
      -- Need to add priority to TB_SYS.  TB_SYS::Priority => 7;
      Deployment::Execution_Platform => linux32;
      TB_SYS::Vm_Config_File => "user_code/linux_vm_config.stg";
end linux_vm.impl;

processor x86		
end x86;

processor implementation x86.test
	subcomponents
		linux_vm: virtual processor linux_vm.impl;
	properties
      TB_SYS::OS => camkes;
      TB_SYS::HW => x86;
		Deployment::Execution_Platform => sel4;		
end x86.test;

-------------------------------------------------------
--
-- Overkill for this example: allows a straightforward
-- hierarchical binding of processes and threads to 
-- a virtual processor.
--  
-------------------------------------------------------

system linux_vm_procs
   features
      Input1: in data port Base_Types::Unsigned_32;
end linux_vm_procs;

system implementation linux_vm_procs.Impl
   subcomponents
      r    : process proc_receiver.Impl;
	connections
		in_to_r : port Input1 -> r.Input1;
end linux_vm_procs.Impl;

system the_impl	
end the_impl;

-- Here is where things fit together.
-- We have a processor binding for sel4 and a 
-- virtual processor for the VM.
-- We bind our seL4 processes to the sel4 processor,
-- and our linux processes to the vm.

system implementation the_impl.Impl
	subcomponents
      sel4_cpu  : processor x86.test;
      s         : process proc_sender.Impl;
		r         : system linux_vm_procs.Impl;
	connections
		s_to_r: port s.Output1 -> r.Input1;
	properties
	   actual_processor_binding => (reference (sel4_cpu.linux_vm)) applies to r;
      actual_processor_binding => (reference (sel4_cpu)) applies to s;	   
end the_impl.Impl;



end test7_vm;