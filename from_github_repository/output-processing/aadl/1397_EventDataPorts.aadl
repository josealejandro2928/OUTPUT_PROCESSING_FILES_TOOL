package PingTwins
public 
   with Base_Types;
   with TB_SYS; 
   with Data_Model;

data msg
  properties
    Data_Model::Data_Representation => Struct;
end msg;

data implementation msg.impl
  subcomponents
    dummy : data Base_Types::Integer_32;
end msg.impl;

thread pong1
	features
		i: in event data port msg.impl {
	      TB_SYS::Compute_Entrypoint_Source_Text => ("In");
		};

		o: out event data port msg.impl {
	      TB_SYS::CommPrim_Source_Text => "Out";				
		};
		
	properties 
	    Dispatch_Protocol => Periodic;
		Period => 100 ms;
		Source_Text => ("user_code/user_pong.c","user_code/includes/pong1/user_pong.h");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("pong");
	   	Priority => 10;
	    Stack_Size => 256 bytes;
	    TB_SYS::Thread_Type => Active ;
	   	Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{1 o}}";
end pong1; 


thread pong2
	features
		i: in event data port msg.impl {
	      TB_SYS::Compute_Entrypoint_Source_Text => ("In");
		};

		o: out event data port msg.impl {
	      TB_SYS::CommPrim_Source_Text => "Out";	
		};
		
	properties 
	    Dispatch_Protocol => Periodic;
		Period => 100 ms;
		Source_Text => ("user_code/user_pong.c","user_code/includes/pong2/user_pong.h");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("pong");
	   	Priority => 10;
	    Stack_Size => 256 bytes;
	    TB_SYS::Thread_Type => Active ;
	   	Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{1 o}}";
end pong2; 


thread ping
	features
		i : in event data port msg.impl {
	      TB_SYS::Compute_Entrypoint_Source_Text => ("In");
	      QUEUE_SIZE => 1;
		};
		o : out event data port msg.impl {
	      TB_SYS::CommPrim_Source_Text => "Out";
		};
	properties 
		Dispatch_Protocol => Periodic;
		Period => 100 ms;
		Source_Text => ("user_code/user_ping.c");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("ping");
	   	Priority => 10;
	    Stack_Size => 256 bytes;
	    TB_SYS::Thread_Type => Active ;
	    Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{1 o}}";
end ping; 

process proc

end proc;

process implementation proc.Impl
	subcomponents
		po1: thread pong1;
 		po2: thread pong2;
		pi: thread ping;
	connections
		pi_to_po1 : port pi.o -> po1.i;
		pi_to_po2 : port pi.o -> po2.i;
		po1_to_pi : port po1.o -> pi.i;
		po2_to_pi : port po2.o -> pi.i;
end proc.Impl;

system pingtwins
end pingtwins;

processor main
end main;

processor implementation main.camkes
   properties
      TB_SYS::OS => camkes;
      TB_SYS::HW => QEMU;
end main.camkes;

system implementation pingtwins.impl
	subcomponents
		tl: process proc.Impl;
		toplevel: processor main.camkes;
	properties		
		actual_processor_binding => (reference (toplevel)) applies to tl;    
end pingtwins.impl;

end PingTwins;