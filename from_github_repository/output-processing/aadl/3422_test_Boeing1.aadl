-- AADL Test Boeing1: active -> passive threads using mixed scalar/struct argument RPC.

-- Changes made to Boeing files: 
-- No one defines the prototype to doCall in outa component; added 
--		reference to smaccm_compa.h
-- All C files use #include "foo.h".  For CAmkES, these need to be 
--	 #include <foo.h>, or we need to restructure directories somewhat.
-- Modified all C files to #include <foo.h>				
-- Record type LOIConfig is defined in "common.h".
-- No one defines the prototype to doCall in outa
-- We do #typedef struct, Ivory just does struct; several changes related to this. 
-- All includes are "" rather than <>
-- Removed __packed__ from structs in common.h
-- Removed return value from doCall(...) and added it as an int32 argument. 
-- Changed name of doCall(...) to aadl_do_doCall(...) to match AADL conventions
-- Removed type declaration of LOIConfig from Common.h and replaced it with reference to 
--		"smaccm_compa.h"
-- Removed all of the "struct" references in variable declarations from compb.
-- AADL code generator makes all fields lowercase for structures, due to AADL case insensitivity.  
-- In compacompa.h, compacompa.c, Changed void caller() to void caller(uint32_t arg);


package test_boeing1
public 
   with Base_Types;
   with TB_SYS;   
   with Data_Model;


data LOIConfig_Struct
  properties
    Data_Model::Data_Representation => Struct;
end LOIConfig_Struct;

data implementation LOIConfig_Struct.impl
  subcomponents
    vehicleType : data Base_Types::Unsigned_16;
    vehicleSubType : data Base_Types::Unsigned_16;
    vehicleId : data Base_Types::Integer_32;
  properties 
  	TB_SYS::CommPrim_Source_Text => "LOIConfig";
end LOIConfig_Struct.impl;


subprogram doCall
features
	n_var0: in out parameter LOIConfig_Struct.impl;
	output: out parameter Base_Types::Integer_32;
end doCall;


subprogram group doCall_interface
features
	doCall: provides subprogram access doCall;
end doCall_interface;

-- Example of a periodically dispatched "Active" thread.   
thread compa
	features
		do: requires subprogram group access doCall_interface; 
	
	properties 
	    Dispatch_Protocol => Periodic;
	    TB_SYS::Thread_Type => Active ;
	    Period => 250 ms;
		Source_Text => ("outa/common.c", 
		                "outa/common.h", 
		                "outa/compacompa.c",
		                "outa/compacompa.h", 
		                "outa/ivory.h",
		                "outa/ivory_asserts.h",
		                "outa/ivory_templates.h");
	    TB_SYS::Compute_Entrypoint_Source_Text => ("caller");
	    Priority => 10;
	    Stack_Size => 4096 bytes;
	    Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{}}";
end compa ; 

-- Example of a passive thread providing an RPC interface  
thread compb
	features
		do: provides subprogram group access doCall_interface;
		
	properties 
	    Dispatch_Protocol => Aperiodic;
	    TB_SYS::Thread_Type => Passive ;
	    Source_Text => ("outb/common.c", 
		                "outb/common.h", 
		                "outb/compbcompb.c",
		                "outb/compbcompb.h", 
		                "outb/ivory.h",
		                "outb/ivory_asserts.h",
		                "outb/ivory_templates.h");
	    Compute_Execution_Time => 10 us .. 50 us;
	    TB_SYS::Sends_Events_To => "{{}}";
end compb ; 

process proc

end proc;

process implementation proc.Impl
	subcomponents
		s: thread compa;
		r: thread compb;
	connections
		s_to_r : subprogram group access s.do -> r.do;
end proc.Impl;

system test_boeing1
end test_boeing1;

system implementation test_boeing1.impl
	subcomponents
		tl: process proc.Impl;
	properties
		TB_SYS::OS => CAmkES;
		TB_SYS::HW => QEMU;

end test_boeing1.impl;

end test_boeing1;