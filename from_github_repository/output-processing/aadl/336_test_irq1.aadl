-- Note: this example shows a single send of a scalar type from an
-- active thread to a passive thread.  It is designed to test:
-- 	Component naming
--  Message distribution for scalars
--  Passive thread dispatch 


package test_irq1
public 
   with Base_Types;
   with TB_SYS;   

-- Example of a periodically dispatched "Active" thread.   
thread sender
	features
		Input1: in event data port Base_Types::Integer_64 {
		  Source_Text => ("user_code/user_sender.c", 
		                  "user_code/qemu_clock_driver.c", 
		                  "user_code/clock_driver.h");
		  TB_SYS::Is_ISR => true; 
		  TB_SYS::First_Level_Interrupt_Handler => "timer_flih";
	      Compute_Entrypoint_Source_Text => "timer_slih";
		  TB_SYS::Signal_Name => "irq";
		  TB_SYS::Memory_Pages => ("mem", "0x53F98000:0x1000");
		  TB_SYS::Signal_Number => 27;			
	      TB_SYS::Sends_Events_To => "{{2 Output1}}";
		};
		Output1: out event data port Base_Types::Integer_64 {
	      TB_SYS::CommPrim_Source_Text => "ping_Output1";			
		};
	
	properties 
	    Dispatch_Protocol => Sporadic;
	    Period => 100 ms;
	    Initialize_Entrypoint_Source_Text => "initialize_timer";
	    TB_SYS::Sends_Events_To => "{{}}";
	    Priority => 10;
	    Stack_Size => 4196 bytes;
	    TB_SYS::Thread_Type => Active ;
	    Compute_Execution_Time => 10 us .. 50 us;
end sender ; 

-- Example of an aperiodically dispatched "passive" thread.   
thread receiver
	features
		Input1: in event data port Base_Types::Integer_64 {
	      TB_SYS::Compute_Entrypoint_Source_Text => ("ping_received");
		  Source_Text => ("user_code/user_receiver.c");
		}; 
				
	properties 
       Dispatch_Protocol => Sporadic;
       Period => 100 ms;
       TB_SYS::Sends_Events_To => "{{}}";
       Priority => 10;
       Stack_Size => 4196 bytes;
       TB_SYS::Thread_Type => Active ;
       Compute_Execution_Time => 10 us .. 50 us;
end receiver ; 


process proc

end proc;

process implementation proc.Impl
	subcomponents
		s: thread sender;
		r1: thread receiver;
	connections
		s_to_r1 : port s.Output1 -> r1.Input1;
end proc.Impl;

processor main     
end main;

processor implementation main.camkes
   properties
      TB_SYS::OS => camkes;
      TB_SYS::HW => QEMU;
end main.camkes;

processor implementation main.linux
   properties
      TB_SYS::OS => linux;
      TB_SYS::HW => X86;
end main.linux;

processor implementation main.vxworks
   properties
      TB_SYS::OS => vxworks;
      TB_SYS::HW => x86;
end main.vxworks;

processor implementation main.echronos
   properties
      TB_SYS::OS => echronos;
      TB_SYS::HW => pixhawk;
end main.echronos;

system test
end test;

system implementation test.camkes
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.camkes;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.camkes;

system implementation test.echronos
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.echronos;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.echronos;

system implementation test.vxworks
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.vxworks;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.vxworks;

system implementation test.linux
   subcomponents
      tl: process proc.Impl;
      toplevel: processor main.linux;
   properties
      actual_processor_binding => (reference (toplevel)) applies to tl;     
end test.linux;

end test_irq1;