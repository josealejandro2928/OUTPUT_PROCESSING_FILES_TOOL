package Clock
public 
   with Base_Types;
   
system Counter
	features
		Output: out data port Base_Types::Integer;
			
	annex agree {** 
		guarantee "Counter" : Output = (0 -> (pre(Output) + 1));
	**};
	
end Counter ; 
   
   
system Sieve
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
			
	annex agree {** 
		assume "Sieve" : (Input = 0) -> (pre(Input) < Input);
		guarantee "Sieve" : Output = if Input mod 7 = 0 then -1 else Input ;
	**};	
end Sieve ; 


system Target
	features
		Input: in data port Base_Types::Integer;
			
	annex agree {** 
		assume "Target" : ((Input = 0) -> (pre(Input) < Input)) and (not (Input mod 7 = 0)) ;
	**};
	
end Target ; 

   
system top_level
	annex agree {**
	**};	
end top_level;

system implementation top_level.Impl
	subcomponents
		counter : system Counter ;
		sieve : system Sieve ;
		target : system Target ;
	connections
		counter_to_sieve : port counter.Output -> sieve.Input {Communication_Properties::Timing => immediate;};
		sieve_to_target : port sieve.Output -> target.Input {Communication_Properties::Timing => immediate;};
	annex agree{**	
		synchrony: asynchronous;
		
		assert (counter._CLK);
		assert (sieve._CLK);
		assert (target._CLK = sieve._CLK and (not (sieve.Output = -1)));
		
	**};
	
end top_level.Impl;
	
end Clock;