package camera_vm
public
  with Base_Types;
  with TB_SYS;
  with Data_Model;

  data bbox
  end bbox;

  data implementation bbox.i
    subcomponents
      left: data Base_Types::Unsigned_32; 
      right: data Base_Types::Unsigned_32; 
      top: data Base_Types::Unsigned_32; 
      bottom: data Base_Types::Unsigned_32; 
  end bbox.i;
  
  thread camera_vm
    features
      bbox_out: out event data port bbox.i;
     
    properties
      TB_SYS::Is_External => true;
      TB_SYS::Thread_Type => Active;
      Priority => 0;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
  end camera_vm;
  
  --
  -- Code to exercise camera_vm
  --
  thread receiver
    features
      bbox_in : in event data port bbox.i;

    properties
      TB_SYS::Thread_Type => Active;
      Priority => 200;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
      Source_Text => ("user_code/receiver.c");

      --TB_SYS::Sends_Events_To => "{{1 output}}";
      Compute_Entrypoint_Source_Text => "receive" applies to bbox_in;
  end receiver;

  process proc
  end proc;

  process implementation proc.i
    subcomponents
      vm: thread camera_vm;
      receiver: thread receiver;

    connections
      camera_telem : port vm.bbox_out -> receiver.bbox_in;
  end proc.i;

  system wrapper
  end wrapper;

  system implementation wrapper.i
    subcomponents
      proc: process proc.i;

    properties
      TB_SYS::OS => CAmkES;
      TB_SYS::HW => ODROID;
  end wrapper.i;
end camera_vm;