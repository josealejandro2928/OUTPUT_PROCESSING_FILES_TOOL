package shared_variable
--
--  This architecture pattern illustrates the use
--  protection mechanism when using shared variables.
--  This is recommended and/or advised by the NASA report on Flight
--  Software Complexity.

--  For reference, see the document
--  NASA Study on Flight Software Complexity
--  Appendix B, Section 5 (page 7)
-- 
public

data shared
end shared;

thread generic
features
	da : requires data access shared;
end generic;

thread generic_3vars
features
	da1 : requires data access shared;
	da2 : requires data access shared;
	da3 : requires data access shared;
end generic_3vars;

thread generic_3vars_array
features
	da : requires data access shared[3];
end generic_3vars_array;

thread writer extends generic
properties
	Access_Right => write_only applies to da;
end writer;

thread reader_writer extends generic
properties
	Access_Right => read_write applies to da;
end reader_writer;

thread reader extends generic
properties
	Access_Right => read_only applies to da;
end reader;

process pr
end pr;

process implementation pr.i
subcomponents
	shared_data : data shared;
end pr.i;

--
--  The following example is defective because
--  there are several writers without a locking
--  protocol which can then lead to race conditions
--  and data inconsistencies issues.
-- 
process implementation pr.defective1 extends pr.i
subcomponents
	tr1 : thread reader;
	tr2 : thread reader_writer;
	tw1 : thread writer;
connections
	c1 : data access shared_data -> tr1.da;
	c2 : data access shared_data -> tr2.da;
	c3 : data access shared_data -> tw1.da;
end pr.defective1;



--
--  In the following, the use of the concurrency
--  protocol is too much: it is not needed and could
--  then lead to unexpected resources usage overhead.
--
process implementation pr.defective2 extends pr.i
subcomponents
	tr1 : thread reader;
	tr2 : thread reader;
	tw1 : thread writer;
connections
	c1 : data access shared_data -> tr1.da;
	c2 : data access shared_data -> tr2.da;
	c3 : data access shared_data -> tw1.da;
properties
	Concurrency_Control_Protocol => Protected_Access applies to shared_data;
end pr.defective2;

--
-- In this architecture, we share three variables
-- that have the same types. On the other hand,
-- this might be updated/changed by using an array.
-- We might be careful because in that case,
-- we would like to make sure we use the same types
-- on all variables.
--
process implementation pr.defective3
subcomponents
	shared_data1 	: data shared;
	shared_data2 	: data shared;
	shared_data3 	: data shared;
	tr 				: thread generic_3vars;
	tw 				: thread generic_3vars;
connections
	c1r : data access shared_data1 -> tr.da1;
	c1w : data access shared_data1 -> tw.da1;
	c2r : data access shared_data2 -> tr.da2;
	c2w : data access shared_data2 -> tw.da2;
	c3r : data access shared_data3 -> tr.da3;
	c3w : data access shared_data3 -> tw.da3;
end pr.defective3;


--
--  The previous defective implementation is now
--  correct because we make use of a concurrency
--  protocol.
--
process implementation pr.correct1 extends pr.i
subcomponents
	tr1 : thread reader;
	tr2 : thread writer;
	tw1 : thread writer;
connections
	c1 : data access shared_data -> tr1.da;
	c2 : data access shared_data -> tr2.da;
	c3 : data access shared_data -> tw1.da;
properties
	Concurrency_Control_Protocol => Protected_Access applies to shared_data;
end pr.correct1;


--
--  In the following, the system is correct because
--  we have only one writer so that we do not need
--  concurrency protocol.
--
process implementation pr.correct2 extends pr.i
subcomponents
	tr1 : thread reader;
	tr2 : thread reader;
	tw1 : thread writer;
connections
	c1 : data access shared_data -> tr1.da;
	c2 : data access shared_data -> tr2.da;
	c3 : data access shared_data -> tw1.da;
end pr.correct2;


--
--  This is the correct implementation of the defective3
--  process that uses an array.
--
process implementation pr.correct3
subcomponents
	shared_data 	: data shared[3];
	tr 				: thread generic_3vars_array;
	tw 				: thread generic_3vars_array;
connections
	cr : data access shared_data -> tr.da;
	cw : data access shared_data -> tw.da;
end pr.correct3;


system main
end main;

system implementation main.i
subcomponents
	c1 : process pr.correct1;
	d1 : process pr.defective1;
	c2 : process pr.correct2;
	d2 : process pr.defective2;
end main.i;

system implementation main.i2
subcomponents
	d2 : process pr.defective2;
end main.i2;

end shared_variable;