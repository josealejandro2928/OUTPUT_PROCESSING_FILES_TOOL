--isolette.aadl

-- infant incubator temperature control

-- data types defined in Iso_Variables.aadl
-- added BLESS annex subclauses and Assertions 11/4/2012 brl

--strategy, heat-on below midpoint; heat-off midpoint and warmer
--easily stay within desired temperature range with 10s period, +/- 0.1F of midpoint


package Isolette
  public
	with Base_Types, BLESS, EMV2, --error modeling properties
ErrorLibrary, --predeclared error types in Error Modeling anned
Iso_Variables, Iso_Properties;

	with Isolette_Properties;

	abstract Nurse
	-- interacts with Isolette via operator interface
		features
			operate: out feature ;
			Removechild: feature;
			placechild: feature;
			hearAlarmRemoveChild: in feature;
		flows
			opInput: flow source operate;
			takeChildOut: flow sink removechild;
			alarmTakeChildOut: flow sink hearAlarmRemoveChild;
		properties
			Latency => 10 sec .. 10 sec applies to alarmTakeChildOut;
	end Nurse;

	abstract Infant
	-- interacts with Isolette by being placed in it
		features
			isoletteAir: in feature;
	end Infant;
	
	abstract Air
		-- air inside or outside the Isolette
		features
		airTemperature: out feature;
		heating: in feature; 
		externalEffect: in feature;
		flows
		measurableTemp: flow source airTemperature;
		properties
			latency => 0 ms .. 0 ms applies to measurableTemp;
		annex EMV2 {**
			use types ErrorLibrary, isolette;
			error propagations
			heating : in propagation{HeaterError};
			airTemperature : out propagation{OutOfRange};
			flows
			heateffect : error path heating{HeaterError} -> airTemperature{OutOfRange};
			end propagations;
		**};
	end Air;

-- top-level component enclosing the isolette system
	system IsoletteEnvironment
		
	end IsoletteEnvironment;
	
	system implementation IsoletteEnvironment.tier1
		subcomponents
			isolette: system isolette;
			nurse: abstract Nurse;
			outsideair: abstract Air;
			baby: abstract Infant;
		connections
			nurseop: feature nurse.operate -> isolette.operatorInterface;
			noticeAlarm: feature isolette.alarm -> nurse.hearAlarmRemoveChild;
		flows
			alarmResponse: end to end flow isolette.tempAlarm -> noticeAlarm -> nurse.alarmTakeChildOut;
-- recorded in reqspec. Added here for analysis without ALISA
		properties
			Latency => 15 sec .. 15 sec applies to alarmResponse;
	end IsoletteEnvironment.tier1;
	
	system implementation IsoletteEnvironment.tier2 extends IsoletteEnvironment.tier1
		subcomponents
			isolette: refined to system isolette.tier1;
	end IsoletteEnvironment.tier2;

	system implementation IsoletteEnvironment.tier3 extends IsoletteEnvironment.tier2
		subcomponents
			isolette: refined to system isolette.tier2Functional;
	end IsoletteEnvironment.tier3;

	system isolette
		features
			operatorInterface: in feature;
			alarm: out feature;
			insideAirTemp: out feature;
		flows
			processCmd: flow sink operatorInterface;
			tempAlarm: flow source alarm;
		properties
			Latency => 5 sec .. 5 sec applies to tempAlarm;
			Latency => 500 ms .. 500 ms applies to processCmd;
			Isolette_Properties::Temperature_Change_Rate => 1.0 Fdeg_Minute;
		annex EMV2 {**
			use types ErrorLibrary, Isolette;
			use behavior Isolette::FailStop;
			error propagations
			infantExposure : out propagation {DangerousInfantExposure};
			end propagations;
			propagation paths
				infantExposure: propagation point;
			end paths;
			properties
				EMV2::OccurrenceDistribution => [ProbabilityValue => Iso_Properties::IsoletteExpectedFailureRateValue;] 
      applies to failed;      
		**};
	end isolette;

-- first-tier subcomponents and their connections
	system implementation isolette.tier1
		subcomponents
			thermostat: system thermostat_th;
			temperature_sensor: device temperature_sensor_ts;
			heat_source: device heat_source_hs;
			operator_interface: system operator_interface_oi.impl;
			inside_air: abstract Air;  
		connections
			ct: port temperature_sensor.measured_temperature -> thermostat.current_temperature;
			hc: port thermostat.heat_control -> heat_source.heat_control;
			ldt: port operator_interface.lower_desired_temperature -> thermostat.lower_desired_temperature;
			udt: port operator_interface.upper_desired_temperature -> thermostat.upper_desired_temperature;
			lat: port operator_interface.lower_alarm_temperature -> thermostat.lower_alarm_temperature;
			uat: port operator_interface.upper_alarm_temperature -> thermostat.upper_alarm_temperature;
			rs: port thermostat.regulator_status -> operator_interface.regulator_status;
			ms: port thermostat.monitor_status -> operator_interface.monitor_status;
			dt: port thermostat.display_temperature -> operator_interface.display_temperature;  -- mismatched type if we change incoming to display_temperature
			al: port thermostat.alarm_action -> operator_interface.alarm_action;
			alarmsound: feature  operator_interface.alarm_sound -> alarm;
			heat: feature heat_source.heat -> inside_air.heating;
		flows
			tempAlarm: flow source temperature_sensor.measureTemp -> ct -> thermostat.tempAlarm -> al -> operator_interface.soundalarm -> alarmsound -> alarm;
		annex EMV2 {**
			use behavior Isolette::FailStop;
			component error behavior
			propagations
			working -[ 1 ormore(inside_air.airTemperature{OutOfRange} , operator_interface.alarm_sound{ServiceOmission})]-> infantExposure{DangerousInfantExposure};
			end component;
			composite error behavior
			states
			-- Figure 5 HB: parts & monitor alarm (see thermostat)
				CompositeFailed:[1 ormore (thermostat.Failed, temperature_sensor.Failed, heat_source.Failed, operator_interface.Failed ) ]-> Failed;
			end composite;
		**};
	end isolette.tier1;


	system implementation isolette.tier2Functional extends isolette.tier1
		subcomponents
			thermostat: refined to system thermostat_th.functional;
			heat_source: refined to device heat_source_hs_Rev;
		annex EMV2 {**
			use behavior Isolette::FailStop;
--			component error behavior
--			propagations
--			all -[thermostat.monitor_temperature.alarm{AlarmError}]-> alarm{ServiceOmission};
--			end component;
			composite error behavior
			states
			-- Figure 5 HB: parts & monitor alarm (see thermostat)
				CompositeFailed:[1 ormore ( thermostat.monitor_temperature.failed and 1 ormore(thermostat.regulate_temperature.Failed, heat_source.Failed), temperature_sensor.Failed, operator_interface.Failed ) ]-> Failed;
			end composite;
		**};
	end isolette.tier2Functional;
	
	system implementation isolette.EmbeddedSoftware extends isolette.tier2Functional
		subcomponents
			thermostat : refined to system thermostat_th.softwaresinglecpu;
		-- TODO: fault model that identifies CPU as single source of failure causing regulator and monitor not to be independent.
		-- TODO: in a 2 CPU scenario we may still have a single source of failure due to a single power supply.
	end isolette.EmbeddedSoftware;

--A.5 THERMOSTAT SYSTEM FUNCTION
	system thermostat_th
		features
			current_temperature: in data port Iso_Variables::measured_temperature;
			current_temperature_status: in data port iso_variables::valid_flag;
			heat_control: out data port Iso_Variables::on_off {BLESS::Assertion => "<<HEAT_CONTROL(x)>>";};
			lower_desired_temperature: in data port Iso_Variables::lower_desired_temperature;
			upper_desired_temperature: in data port Iso_Variables::upper_desired_temperature;
			lower_alarm_temperature: in data port Iso_Variables::lower_alarm_temperature;
			upper_alarm_temperature: in data port Iso_Variables::upper_alarm_temperature;
			regulator_status: out data port Iso_Variables::status {BLESS::Assertion => "<<REGULATOR_STATUS(x)>>";};
			monitor_status: out data port Iso_Variables::status {BLESS::Assertion => "<<:=MONITOR_STATUS()>>";};
			display_temperature: out data port Iso_Variables::display_temperature {
						BLESS::Assertion => "<<DT: :=current_tempreature.t^0>>";};
			alarm_action: out data port Iso_Variables::on_off {BLESS::Assertion => "<<:=ALARM()>>";};
		flows
			displayCurrentTemp: flow path current_temperature -> display_temperature;
			tempAlarm: flow path current_temperature -> alarm_action;
		properties
			Isolette_Properties::Temperature_Accuracy => 0.1 Fahrenheit;
			Latency => 1 sec .. 1 sec applies to tempAlarm;
		annex EMV2 {**
			use types ErrorLibrary, Isolette;
			use behavior Isolette::FailStop;
			error propagations
				current_temperature: in propagation { InvalidTemperature}; -- InvalidTemperature};
				lower_desired_temperature: in propagation { InvalidTemperature}; -- InvalidTemperature};
				upper_desired_temperature: in propagation { InvalidTemperature}; -- InvalidTemperature};
				lower_alarm_temperature: in propagation { InvalidTemperature}; -- InvalidTemperature};
				upper_alarm_temperature: in propagation { InvalidTemperature}; -- InvalidTemperature};
				display_temperature: out propagation {InvalidTemperature};
				regulator_status: out propagation {RegulatorStatusError};
				monitor_status: out propagation {MonitorStatusError};
				alarm_action: out propagation {AlarmError};
				heat_control: out propagation {RegulatorError};
			flows
				ThermoFails: error source heat_control{RegulatorError};
				BadTemp: error sink current_temperature{InvalidTemperature};
				BadDesiredRange: error path lower_desired_temperature{InvalidTemperature} -> heat_control{RegulatorError};
				BadAlarmRange: error path lower_alarm_temperature{ InvalidTemperature} -> heat_control{RegulatorError};
			end propagations;
			properties
			    EMV2::OccurrenceDistribution => [ProbabilityValue => Iso_Properties::ThermostatFailureRateValue;] 
			     applies to failed, ThermoFails.RegulatorError;      
				
		**};
	end thermostat_th;
	
	system implementation thermostat_th.functional
		subcomponents
			regulate_temperature: abstract regulate_temperature;
			monitor_temperature: abstract monitor_temperature;
		connections
			tctm: port current_temperature -> monitor_temperature.current_temperature;
			tctr: port current_temperature -> regulate_temperature.current_temperature;
			thc: port regulate_temperature.heat_control -> heat_control;
			tudt: port upper_desired_temperature -> regulate_temperature.upper_desired_temperature;
			tldt: port lower_desired_temperature -> regulate_temperature.lower_desired_temperature;
			tuat: port upper_alarm_temperature -> monitor_temperature.upper_alarm_temperature;
			tlat: port lower_alarm_temperature -> monitor_temperature.lower_alarm_temperature;
			trs: port regulate_temperature.regulator_status -> regulator_status;
			tdt: port regulate_temperature.displayed_temp -> display_temperature;
			tms: port monitor_temperature.monitor_status -> monitor_status;
			ta: port monitor_temperature.alarm -> alarm_action;
		flows
			tempAlarm: flow path current_temperature -> tctm -> monitor_temperature.triggerAlarm -> ta -> alarm_action;
		annex EMV2 {**
			composite error behavior
			states
			-- Figure 5 HB: parts & monitor alarm (see thermostat)
				CompositeFailed: [regulate_temperature.Failed and monitor_temperature.Failed ]-> Failed;
			end composite;
				
		**};
	end thermostat_th.functional;

	system implementation thermostat_th.softwaresinglecpu extends thermostat_th.functional
		subcomponents
			regulate_temperature : refined to process regulate_temperature_rt.impl;
			monitor_temperature: refined to process monitor_temperature_mt.impl;
			cpu1: processor CPU;
		properties
			Actual_Processor_Binding => (reference(cpu1)) applies to regulate_temperature;
			Actual_Processor_Binding => (reference(cpu1)) applies to monitor_temperature;
	end thermostat_th.softwaresinglecpu;
	
	processor CPU
			
	end CPU;


--A.5.1 REGULATE TEMPERATURE FUNCTION
	abstract regulate_temperature
		features
			upper_desired_temperature: in data port Iso_Variables::upper_desired_temperature;
			lower_desired_temperature: in data port Iso_Variables::lower_desired_temperature;
			regulator_status: out data port Iso_Variables::status {BLESS::Assertion => "<<REGULATOR_STATUS(x)>>";};
			displayed_temp: out data port Iso_Variables::display_temperature;
			current_temperature: in data port Iso_Variables::measured_temperature;
			current_temperature_status: in data port iso_variables::valid_flag;
			heat_control: out data port Iso_Variables::on_off {BLESS::Assertion => "<<HEAT_CONTROL(x)>>";};
		annex EMV2 {**
			use types ErrorLibrary, isolette;
			use behavior Isolette::FailStop;
			error propagations
				current_temperature: in propagation {InvalidTemperature};
				upper_desired_temperature: in propagation {InvalidTemperature};
				lower_desired_temperature: in propagation {InvalidTemperature};
				displayed_temp: out propagation {InvalidTemperature};
				regulator_status: out propagation {RegulatorStatusError};
				heat_control: out propagation {RegulatorError};
			flows
				badTempControl : error path current_temperature{InvalidTemperature} -> heat_control{RegulatorError}; -- Thermo does not detect missing TS readings
				badDesired : error path lower_desired_temperature{InvalidTemperature} -> heat_control{RegulatorError}; -- Thermo does not detect missing TS readings
			end propagations;
  		properties
  	      EMV2::OccurrenceDistribution => [ProbabilityValue => Iso_Properties::ThermostatRegulatorFailureRateValue; ]
      	applies to failed;      
		**};
	end regulate_temperature;


--A.5.1 REGULATE TEMPERATURE FUNCTION as software
	
	process regulate_temperature_rt extends regulate_temperature
	end regulate_temperature_rt;

	process implementation regulate_temperature_rt.impl
		subcomponents
			manage_regulator_interface: thread manage_regulator_interface_mri.impl;
			manage_heat_source: thread manage_heat_source_mhs.impl;
			manage_regulator_mode: thread manage_regulator_mode_mrm.impl;
		connections
			rudt: port upper_desired_temperature -> manage_regulator_interface.upper_desired_temp;
			rldt: port lower_desired_temperature -> manage_regulator_interface.lower_desired_temp;
			rrs: port manage_regulator_interface.regulator_status -> regulator_status;
			rdt: port manage_regulator_interface.displayed_temp -> displayed_temp;
			rcti: port current_temperature -> manage_regulator_interface.current_temperature;
			rcth: port current_temperature -> manage_heat_source.current_temperature;
			rhc: port manage_heat_source.heat_control -> heat_control;
			rdr: port manage_regulator_interface.desired_range -> manage_heat_source.desired_range;
			rrmh: port manage_regulator_mode.regulator_mode -> manage_heat_source.regulator_mode;
			rrmi: port manage_regulator_mode.regulator_mode -> manage_regulator_interface.regulator_mode;
			rctm: port current_temperature -> manage_regulator_mode.current_temperature;
			rif: port manage_regulator_interface.interface_failure -> manage_regulator_mode.interface_failure;
	end regulate_temperature_rt.impl;

--A.5.1.1 Manage Regulator Interface Function
	thread manage_regulator_interface_mri
		features
			regulator_status: out data port Iso_Variables::status {BLESS::Assertion => "<<REGULATOR_STATUS(x)>>";};
			upper_desired_temp: in data port Iso_Variables::upper_desired_temperature;
			lower_desired_temp: in data port Iso_Variables::lower_desired_temperature;
			current_temperature: in data port Iso_Variables::measured_temperature;
			displayed_temp: out data port iso_variables::display_temperature;
			desired_range: out data port Iso_Variables::desired_range;
			regulator_mode: in data port Iso_Variables::regulator_mode {
						BLESS::Assertion => "<<REGULATOR_MODE(regulator_mode)>>";};
			interface_failure: out data port Base_Types::Boolean {
						BLESS::Assertion => "<<REGULATOR_INTERFACE_FAILURE()>>";};
		annex EMV2 {**
			use types ErrorLibrary, isolette;
			use behavior isolette::FailStop;
			
			error propagations
				regulator_status: out propagation {RegulatorStatusError};
				current_temperature: in propagation {InvalidTemperature};
				displayed_temp: out propagation {InvalidTemperature};
				regulator_mode: in propagation {RegulatorModeError};
				interface_failure: out propagation {ServiceOmission};
			flows --model error in detection and reporting
				ifd: error source interface_failure {ServiceOmission};
--				ekoor: error sink current_temperature {OutOfRange}; --detects out-of-range
				epsve: error path current_temperature {InvalidTemperature} -> displayed_temp {InvalidTemperature};
			end propagations;
			
			component error behavior
			detections --in "failed" state put value on port interface_failure
				failed -[]-> interface_failure !;
			end component;
			
			properties --set occurrence
				EMV2::OccurrenceDistribution => Iso_Properties::DetectionInterfaceFailureRate applies to ifd;
					--"fail" is the internal event that cause
				EMV2::OccurrenceDistribution => Iso_Properties::InterfaceFailureRate applies to fail;
		**};
	end manage_regulator_interface_mri;

	thread implementation manage_regulator_interface_mri.impl
	end manage_regulator_interface_mri.impl;

--A.5.1.2 Manage Regulator Mode Function
	thread manage_regulator_mode_mrm
		features
			regulator_mode: out data port Iso_Variables::regulator_mode {
						BLESS::Assertion => "<<REGULATOR_MODE(regulator_mode)>>";}; --enumeration assertion
			current_temperature: in data port Iso_Variables::measured_temperature;
			interface_failure: in data port Base_Types::Boolean {
						BLESS::Assertion => "<<REGULATOR_INTERFACE_FAILURE()>>";};
			internal_failure: in data port Base_Types::Boolean {
						BLESS::Assertion => "<<REGULATOR_INTERNAL_FAILURE()>>";};
		annex EMV2 {**
			use types ErrorLibrary, isolette;
			use behavior isolette::FailStop;
			
			error propagations
				regulator_mode: out propagation {RegulatorModeError};
				current_temperature: in propagation {InvalidTemperature};
				interface_failure: in propagation {ServiceOmission};
				internal_failure: in propagation {ServiceOmission};
			flows --model error in detection and reporting
				mrmsve: error path current_temperature {InvalidTemperature} -> regulator_mode {RegulatorModeError}; --bad temp causes bad mode
				mrmif: error path interface_failure {ServiceOmission} -> regulator_mode {RegulatorModeError}; --missing interface failure signal causes bad mode
				mrmin: error path internal_failure {ServiceOmission} -> regulator_mode {RegulatorModeError}; --missing internal failure signal causes bad mode
			end propagations;
			
			component error behavior
			--    detections  --in "failed" state put value on port interface_failure
			--      failed -[ ]-> interface_failure!(true};  --port output of the value "true"
			--      working -[ ]-> interface_failure!(false);
			end component;
			
			properties --set failure rate for manage_regulator_mode_mrm
				EMV2::OccurrenceDistribution => Iso_Properties::MRMFailureRate applies to fail;
		**};
	end manage_regulator_mode_mrm;

	thread implementation manage_regulator_mode_mrm.impl
		annex BLESS {**
  invariant <<true>>
  variables
    start_time : Timing_Properties::Time;  --record time stamp of power-on
    temperature : Iso_Variables::current_temperature;  --get struct from port 
    current_temperature_status : Iso_Variables::status;  --get status from struct
  states
    start : initial state     --power up state  
      <<INI()>>;
    init : complete state <<INI()>>;     --wait for valid regulator status
    check_init : state <<current_temperature_status=temperature.status>>;  
    normal : complete state   --normal operation
      <<RUN()>>;
    check_normal : state 
      <<current_temperature_status=temperature.status and RUN()>>;
    failed : final state;      --failure detected
  transitions
    mrm1:  --power on
      start-[ ]->init
          {start_time:=now 
          <<start_time=now and INI()>>
          ;
    --puts out "Init" as third enumeration label
           regulator_mode!(Init) 
          <<INI()>> 
           };  --end of mrm1
    wait_init: --check temperature status
      init-[on dispatch]->check_init
          {  
          current_temperature?(temperature) 
          ; 
          current_temperature_status := temperature.status
          };  --end of wait_init
    mrm: --timeout on initialization
      check_init-[((now-start_time) >= 
            Iso_Properties::Initialization_Timeout)
            and (interface_failure? or internal_failure?
              or not (current_temperature_status = Valid))]->failed
          { <<not (REGULATOR_OK() or ((now-start_time) < Iso_Properties::Initialization_Timeout))>>
          regulator_mode!(FAILED)
          };  --end of mrm
    mrm2: --transition to normal operation
      check_init-[((now-start_time) >= 
            Iso_Properties::Initialization_Timeout) and
        not (interface_failure? or internal_failure?)
        and (current_temperature_status = Valid)]->normal
          { <<REGULATOR_OK() and RUN()>>
          regulator_mode!(NORMAL)
          <<RUN()>>
          };  --end of mrm2
    mrm2x:  --too soon, back to init
      check_init-[(now-start_time) < 
            Iso_Properties::Initialization_Timeout]->init{};  
    wait_normal: --check temperature status
      normal-[on dispatch]->check_normal
          {<<RUN()>>
          current_temperature?(temperature) 
          ; <<RUN()>>
          current_temperature_status := temperature.status
          <<current_temperature_status=temperature.status and RUN()>>
          };  --end of wait_normal
    mrm3:  --no failures and valid temp 
      check_normal-[ not (interface_failure? or internal_failure?)
        and (current_temperature_status = Valid)]->normal
          {<<REGULATOR_OK() and RUN()>> 
          regulator_mode!(NORMAL)
           <<RUN()>>
          };  --end of mrm3
    mrm3x:  --failure or invalid temp after initialization
      check_normal-[interface_failure? or internal_failure? or
        not (current_temperature_status = Valid)]->failed
          {<<not (REGULATOR_OK() or (now-start_time) < Iso_Properties::Initialization_Timeout)>> 
          regulator_mode!(FAILED)};
  **};
	end manage_regulator_mode_mrm.impl;

--A.5.1.3 Manage Heat Source Function
thread manage_heat_source_mhs
features
  heat_control : out data port Iso_Variables::on_off
    {BLESS::Assertion => "<<HEAT_CONTROL(x)>>";};
  current_temperature : in data port Iso_Variables::measured_temperature;
  desired_range : in data port Iso_Variables::desired_range;
  regulator_mode : in data port Iso_Variables::regulator_mode;
annex EMV2 
  {**
    use types ErrorLibrary,isolette;
    use behavior isolette::FailStop;
  error propagations
  heat_control: out propagation {RegulatorError};
  current_temperature: in propagation {InvalidTemperature};
  regulator_mode: in propagation {RegulatorModeError};
  --no errors from desired_range
  flows  --model error in detection and reporting
    mrmsve: error path current_temperature{InvalidTemperature} 
      -> heat_control{RegulatorError};  --bad temp causes bad heat control
    mrmif: error path regulator_mode{RegulatorModeError} 
      -> heat_control{RegulatorError};  --bad mode causes bad heat control
  end propagations;
    properties  --set failure rate for manage_heat_source_mhs
    EMV2::OccurrenceDistribution => Iso_Properties::MHSFailureRate 
      applies to fail;      
  **};
end manage_heat_source_mhs;

thread implementation manage_heat_source_mhs.impl
end manage_heat_source_mhs.impl;

--A.5.1.4 Detect Regulator Failure Function
device detect_regulator_failure
features
  internal_failure : out data port Base_Types::Boolean
    {BLESS::Assertion => "<<REGULATOR_INTERNAL_FAILURE()>>";};
annex EMV2 
  {**
    use types ErrorLibrary;
    use behavior isolette::FailStop;
  error propagations
  internal_failure: out propagation {ServiceOmission};
  flows  --model error in detection and reporting
    inf: error source internal_failure{ServiceOmission};
  end propagations;
  properties  --set occurrence of detection failure
    EMV2::OccurrenceDistribution => Iso_Properties::DetectionRegulatorFailureRate 
      applies to inf;      
    --set failure rate for regulator
    EMV2::OccurrenceDistribution => Iso_Properties::RegulatorFailureRate 
      applies to fail;      
  **};
end detect_regulator_failure;

--A.5.2 Monitor Temperature Function
abstract monitor_temperature
features
	current_temperature: in data port Iso_Variables::measured_temperature;
	current_temperature_status: in data port iso_variables::valid_flag;
  upper_alarm_temperature : in data port Iso_Variables::upper_alarm_temperature;
  lower_alarm_temperature : in data port Iso_Variables::lower_alarm_temperature;
  alarm : out data port Iso_Variables::on_off
    {BLESS::Assertion => "<<:=ALARM()>>";};
  monitor_status : out data port Iso_Variables::status
    {BLESS::Assertion => "<<:=MONITOR_STATUS()>>";};
	flows
		triggerAlarm: flow path current_temperature ->  alarm; 
	properties
		Latency => 500 ms .. 500 ms applies to triggerAlarm;
annex EMV2 
  {**
    use types ErrorLibrary, isolette;
    use behavior Isolette::FailStop;
  error propagations
  current_temperature: in propagation
    {InvalidTemperature};
  alarm: out propagation {AlarmError};
  monitor_status: out propagation {MonitorStatusError};
	upper_alarm_temperature: in propagation {InvalidTemperature};
	lower_alarm_temperature: in propagation {InvalidTemperature};
  flows
  	badMonitor: error source alarm {AlarmError};
  end propagations;
  component error behavior
  propagations
  	working -[1 ormore(current_temperature{InvalidTemperature},lower_alarm_temperature{InvalidTemperature})]-> alarm{noerror};
  	failed -[1 ormore(lower_alarm_temperature{InvalidTemperature},current_temperature{InvalidTemperature})]-> alarm{AlarmError};
  end component;
  properties
      EMV2::OccurrenceDistribution => [ProbabilityValue =>  Iso_Properties::ThermostatMonitorFailureRateValue ;] 
   	applies to failed, badMonitor.AlarmError, fail;      
  **};
end monitor_temperature;

--A.5.1 REGULATE TEMPERATURE FUNCTION as software
	
	process monitor_temperature_mt extends monitor_temperature
	end monitor_temperature_mt;


process implementation monitor_temperature_mt.impl
subcomponents
  manage_alarm : thread manage_alarm_ma;
  manage_monitor_interface : thread manage_monitor_interface_mmi.impl;
  manage_monitor_mode : thread manage_monitor_mode_mmm.impl;
internal features
	monitor_failure : event;
connections
  mcti : port current_temperature -> manage_monitor_interface.current_temperature;
  mcta : port current_temperature -> manage_alarm.current_temperature;
  mctm : port current_temperature -> manage_monitor_mode.current_temperature;
  mar : port manage_monitor_interface.alarm_range -> manage_alarm.alarm_range;
  malrm : port manage_alarm.alarm_control -> alarm;
  mmma : port manage_monitor_mode.monitor_mode -> manage_alarm.monitor_mode;
  muat : port upper_alarm_temperature -> manage_monitor_interface.upper_alarm_temperature;
  mlat : port lower_alarm_temperature -> manage_monitor_interface.lower_alarm_temperature;
  mms : port manage_monitor_interface.monitor_status -> monitor_status;
  mmmi : port manage_monitor_mode.monitor_mode -> manage_monitor_interface.monitor_mode;
  intff : port manage_monitor_interface.interface_failure -> manage_monitor_mode.interface_failure;
  mf : port monitor_failure -> manage_monitor_mode.internal_failure;
end monitor_temperature_mt.impl;


--A.5.2.1 Manage Monitor Interface Function
thread manage_monitor_interface_mmi
features
  alarm_range : out data port Iso_Variables::alarm_range;
  current_temperature : in data port Iso_Variables::measured_temperature;
  monitor_mode : in data port Iso_Variables::monitor_mode
    {BLESS::Assertion => "<<:=MONITOR_MODE()>>";};
  upper_alarm_temperature : in data port Iso_Variables::upper_alarm_temperature;
  lower_alarm_temperature : in data port Iso_Variables::lower_alarm_temperature;
  monitor_status : out data port Iso_Variables::status
    {BLESS::Assertion => "<<:=MONITOR_STATUS()>>";};
  interface_failure : out data port Base_Types::Boolean
    {BLESS::Assertion => "<<MONITOR_INTERFACE_FAILURE()>>";};
-- fixme: added EMV2 annex to address parsing issue
-- the source connection has an error model while the
-- destination did not have one.
annex EMV2 
  {**
    use types ErrorLibrary,isolette;
    use behavior isolette::FailStop;
  error propagations
  monitor_mode: in propagation {MonitorModeError};
  end propagations;
    properties  --"fail" is the internal event that cause
      EMV2::OccurrenceDistribution => Iso_Properties::MMMFailureRate 
      applies to fail;      
  **};
end manage_monitor_interface_mmi;

thread implementation manage_monitor_interface_mmi.impl
end manage_monitor_interface_mmi.impl;

--A.5.2.2 Manage Monitor Mode Function
--this detects that the thermostat monitor is working properly
--who guards the guards?
--if the monitor watches the operational system for unsafe conditions,
--what makes sure the monitor is operating properly?  -> this thread
thread manage_monitor_mode_mmm
features
  monitor_mode : out data port Iso_Variables::monitor_mode
    {BLESS::Assertion => "<<:=MONITOR_MODE()>>";};
  interface_failure : in data port Base_Types::Boolean
    {BLESS::Assertion => "<<MONITOR_INTERFACE_FAILURE()>>";};
  internal_failure : in event port ;  --Base_Types::Boolean {BLESS::Assertion => "<<MONITOR_INTERNAL_FAILURE()>>";};
  current_temperature : in data port Iso_Variables::measured_temperature;
--    {BLESS::Assertion => "<<CT: :=CURRENT_TEMPERATURE()>>";};  
annex EMV2 
  {**
    use types ErrorLibrary,isolette;
    use behavior isolette::FailStop;
  error propagations
  monitor_mode: out propagation {MonitorModeError};
  interface_failure: in propagation {ServiceOmission};
  internal_failure: in propagation {ServiceOmission};
  current_temperature: in propagation
    {InvalidTemperature};
  flows  --model error in detection and reporting
    mmmiff: error path interface_failure{ServiceOmission} 
      -> monitor_mode{MonitorModeError};
    mmminf: error path internal_failure{ServiceOmission} 
      -> monitor_mode{MonitorModeError};
    mmmct: error path current_temperature{InvalidTemperature} 
      -> monitor_mode{MonitorModeError};
  end propagations;
    properties  --"fail" is the internal event that cause
      EMV2::OccurrenceDistribution => Iso_Properties::MMMFailureRate 
      applies to fail;      
  **};
end manage_monitor_mode_mmm;

thread implementation manage_monitor_mode_mmm.impl
  annex BLESS
  {**
  invariant <<true>>
  variables
    start_time : Timing_Properties::Time;  --record time stamp of power-on
    temperature : Iso_Variables::current_temperature;  --get struct from port 
    current_temperature_status : Iso_Variables::status;  --get status from struct
  states
    start : initial state     --power up state
      <<INI()>>;
    init : complete state <<INI()>>;     --wait for valid monitor status
    check_init : state <<current_temperature_status=temperature.status>>;  
    normal : complete state   --normal operation
      <<RUN()>>;
    check_normal : state 
      <<current_temperature_status=temperature.status and RUN()>>;
    failed : final state;      --failure detected

  transitions
    mmm1:  --power on
      start-[ ]->init
          {start_time:=now 
          <<start_time=now and INI()>>
          ;
           monitor_mode!(NORMAL) 
          <<INI()>> 
           };  --end of mmm1
    wait_init: --check temperature status
      init-[on dispatch]->check_init
          {  
          current_temperature?(temperature) 
          ; 
          current_temperature_status := temperature.status
          };  --end of wait_init
    mmm: --timeout on initialization
      check_init-[((now-start_time) >= 
            Iso_Properties::Initialization_Timeout)
            and (interface_failure? or internal_failure?
              or not (current_temperature_status = Valid))]->failed
          { <<not (MONITOR_OK() or ((now-start_time) < Iso_Properties::Initialization_Timeout))>>
          monitor_mode!(FAILED)
          };  --end of mmm
    mmm2: --transition to normal operation
      check_init-[((now-start_time) >= 
            Iso_Properties::Initialization_Timeout) and
        not (interface_failure? or internal_failure?)
        and (current_temperature_status = Valid)]->normal
          { <<MONITOR_OK() and RUN()>>
          monitor_mode!(NORMAL)
          <<RUN()>>
          };  --end of mmm2
    mmm2x:  --too soon, back to init
      check_init-[(now-start_time) < 
            Iso_Properties::Initialization_Timeout]->init{};  
    wait_normal: --check temperature status
      normal-[on dispatch]->check_normal
          {<<RUN()>>
          current_temperature?(temperature) 
          ; <<RUN()>>
          current_temperature_status := temperature.status
          <<current_temperature_status=temperature.status and RUN()>>
          };  --end of wait_normal
    mmm3:  --no failures and valid temp 
      check_normal-[ not (interface_failure? or internal_failure?)
        and (current_temperature_status = Valid)]->normal
          {<<MONITOR_OK() and RUN()>> 
          monitor_mode!(NORMAL)
           <<RUN()>>
          };  --end of mmm3
    mmm3x:  --failure or invalid temp after initialization
      check_normal-[interface_failure? or internal_failure? or
        not (current_temperature_status = Valid)]->failed
          {<<not (MONITOR_OK() or (now-start_time) < Iso_Properties::Initialization_Timeout)>> 
          monitor_mode!(FAILED)};
  **};
end manage_monitor_mode_mmm.impl;

--A.5.2.3 Manage Alarm Function
thread manage_alarm_ma
features
  alarm_control : out data port Iso_Variables::on_off;
  monitor_mode : in data port Iso_Variables::monitor_mode;
  alarm_range : in data port Iso_Variables::alarm_range;
  current_temperature : in data port Iso_Variables::measured_temperature;
annex EMV2 
  {**
    use types ErrorLibrary,isolette;
    use behavior isolette::FailStop;
  error propagations
  alarm_control: out propagation {AlarmError};
  monitor_mode: in propagation {MonitorModeError};
  --alarm_range is error-free
  current_temperature: in propagation
    {InvalidTemperature};
  flows  --model error in detection and reporting
    mame: error path monitor_mode{MonitorModeError} 
      -> alarm_control{AlarmError};
    mact: error path current_temperature{InvalidTemperature} 
      -> alarm_control{AlarmError};
  end propagations;
    properties  --"fail" is the internal event that cause
      EMV2::OccurrenceDistribution => Iso_Properties::MAFailureRate 
      applies to fail;      
  **};
end manage_alarm_ma;

--A.5.2.4 Detect Monitor Failure Function
--this is where error models signal active threads an 
--internal thermostat monitor failure has been detected
device detect_monitor_failure
features
  internal_failure : out data port Base_Types::Boolean
    {BLESS::Assertion => "<<MONITOR_INTERNAL_FAILURE()>>";};
annex EMV2 
  {**
    use types ErrorLibrary;
    use behavior isolette::FailStop;
  error propagations
  internal_failure: out propagation {ServiceOmission};
  flows  --model error in detection and reporting
    dmf: error source internal_failure{ServiceOmission};
  end propagations;
    properties  --set failure rate for temp monitor
    EMV2::OccurrenceDistribution => Iso_Properties::MonitorFailureRate 
      applies to fail;      
  --set occurrence of detection failure
    EMV2::OccurrenceDistribution => Iso_Properties::DetectionMonitorFailureRate 
      applies to dmf;      
  **};
end detect_monitor_failure;

device temperature_sensor_ts
features
	measured_temperature: out data port Iso_Variables::measured_temperature;
	measured_temperature_status: out data port iso_variables::valid_flag;
  air_temperature : in feature ;
	flows
		measureTemp: flow source measured_temperature;
	properties
		Latency => 1 sec .. 1 sec applies to measureTemp;
annex EMV2 
  {**
    use types ErrorLibrary, isolette;
    use behavior Isolette::FailStop;
  error propagations
  measured_temperature: out propagation  { InvalidTemperature}; -- IncorrectTemperatureValue same as InvalidTemperature. Invalid flag set is TS fails?
  flows
    badTempSensor: error source measured_temperature{InvalidTemperature};	
  end propagations;
  properties
    EMV2::OccurrenceDistribution => [ProbabilityValue => Iso_Properties::TemperatureSensorFailureRateValue;] 
      applies to failed, badTempSensor.InvalidTemperature;
  **};
end temperature_sensor_ts;

device heat_source_hs
features
  heat_control : in data port Iso_Variables::on_off
    {BLESS::Assertion => "<<HEAT_CONTROL(x)>>";};
  heat: out feature;
annex EMV2 
  {**
    use types Isolette, ErrorLibrary;
    use behavior Isolette::FailStop;
  error propagations
  heat_control: in propagation {RegulatorError};
  heat: out propagation {HeaterError};
  flows
  	controlpassthru: error path heat_control{RegulatorError} -> heat{HeaterError}; -- incorrect on/off maps into commission and omission
  	HSFail: error source heat{HeaterError};
  end propagations;
    properties  
    EMV2::OccurrenceDistribution => [ ProbabilityValue => Iso_Properties::HeatSourceFailureRateValue ;]
      applies to failed, HSFail.HeaterError;      
  **};
end heat_source_hs;

device heat_source_hs_Rev extends heat_source_hs
annex EMV2 
  {**
    properties  
    EMV2::OccurrenceDistribution => [ ProbabilityValue => Iso_Properties::HeatSourceFailureRateValue2 ;]
      applies to failed, HSFail.HeaterError;      
  **};

end heat_source_hs_Rev;



system operator_interface_oi
features
  lower_desired_temperature : out data port Iso_Variables::lower_desired_temperature;
  upper_desired_temperature : out data port Iso_Variables::upper_desired_temperature;
  lower_alarm_temperature : out data port Iso_Variables::lower_alarm_temperature;
  upper_alarm_temperature : out data port Iso_Variables::upper_alarm_temperature;
  regulator_status : in data port Iso_Variables::status
    {BLESS::Assertion => "<<REGULATOR_STATUS(x)>>";};
  monitor_status : in data port Iso_Variables::status
    {BLESS::Assertion => "<<:=MONITOR_STATUS()>>";};
  display_temperature : in data port Iso_Variables::display_temperature;
  displayed_temperature : out feature Iso_Variables::display_temperature;
  alarm_action : in data port Iso_Variables::on_off
    {BLESS::Assertion => "<<:=ALARM()>>";};
    alarm_sound : out feature;
	flows
		soundalarm: flow path alarm_action -> alarm_sound;
	properties
	Latency => 2 sec .. 2 sec applies to soundalarm;
		
annex EMV2 
  {**
    use types ErrorLibrary, Isolette;
    use behavior Isolette::FailStop;
  error propagations
  regulator_status: in propagation {RegulatorStatusError};
  monitor_status: in propagation {MonitorStatusError};
  display_temperature: in propagation {InvalidTemperature};
  
  lower_desired_temperature: out propagation {InvalidTemperature};
  upper_desired_temperature: out propagation {InvalidTemperature};
  lower_alarm_temperature: out propagation {InvalidTemperature};
  upper_alarm_temperature: out propagation {InvalidTemperature};
  alarm_action: in propagation {AlarmError};
  alarm_sound : out propagation {ServiceOmission};
  flows
  	triggerAlarm: error path alarm_action{AlarmError} -> alarm_sound{ServiceOmission};
  	badDesired: error source lower_desired_temperature{InvalidTemperature};
  	badAlarm: error source lower_alarm_temperature{InvalidTemperature};
  end propagations;
  properties
  	    EMV2::OccurrenceDistribution => [ ProbabilityValue => Iso_Properties::OperatorInterfaceFailureRateValue ;]
      applies to failed;      
  	    EMV2::OccurrenceDistribution => [ ProbabilityValue => Iso_Properties::OperatorInterfaceFailureRateValue ;]
      applies to badDesired;      
  	    EMV2::OccurrenceDistribution => [ ProbabilityValue => Iso_Properties::OperatorInterfaceFailureRateValue ;]
      applies to badAlarm;      
  	
  **};
end operator_interface_oi;

system implementation operator_interface_oi.impl
end operator_interface_oi.impl;



annex Assertion  -- define labels for Assertions used elsewhere 
{**
--essential efficacy property
--heat control is On when temp is at most Lower Desired Temperature
--  and temp is less than Upper Desired Temperature and it was On previously; Off o.w.
-- SR-1: The Isolette shall include an independent regulator function that 
--   maintains the Current Temperature inside the Isolette within the
--   Desired Temperature Range.
-- MHS-4A: If the Regulator Mode is NORMAL and the Current Temperature is greater than 
--    the Lower Desired Temperature and less than the Upper Desired Temperature, 
--    the value of the Heat Control shall not be changed.
<<HEAT_CONTROL:x+=>  --enumeration value of On/Off
   On   -> HEAT_ON(),
   Off  -> not HEAT_ON()>>   
<<HEAT_ON: :(REGULATOR_OK() and RUN())  --regulator mode is NORMAL
   and (current_temperature <= lower_desired_temperature.t
    or (PREVIOUSLY_ON() and current_temperature < lower_desired_temperature.t))>>
<<PREVIOUSLY_ON: :heat_control^(-1)=On>>
  
--essential safety property  
--alarm when out of alarm range
--SR-2: The Isolette shall include an independent monitor function that 
-- activates an Alarm within a maximum of 5 seconds whenever:
-- the Current Temperature falls below or rises above the Alarm Temperature Range,
-- the Current Temperature or the Alarm Temperature Range is flagged as invalid, 
-- or an internal failure has been detected in the monitor function.
<<ALARM: : OOR() or not REGULATOR_OK() or not MONITOR_OK()>>

--temp out of alarm range
<<OOR: :CURRENT_TEMP() < LOWER_ALARM_TEMP() or CURRENT_TEMP() > UPPER_ALARM_TEMP()>>

--regulator status Table A-10
<<REGULATOR_STATUS:x+=>  --enumeration value
  Init   -> INI(), 
  On     -> (REGULATOR_OK() and RUN()),
  Failed -> (not REGULATOR_OK() and RUN())>>  --return type of Iso_Variables::status
<<REGULATOR_OK: : not(REGULATOR_INTERFACE_FAILURE() or REGULATOR_INTERNAL_FAILURE())
  and current_temperature_status=Valid >>
  
--regulator mode Figure A-4. Regulate Temperature Mode Transition Diagram
<<REGULATOR_MODE:x+=>
  Init   -> INI(),
  NORMAL -> REGULATOR_OK() and RUN(),  
  FAILED -> not REGULATOR_OK() and RUN() >>

--monitor status Table A-15
<<MONITOR_STATUS: :=(MONITOR_OK() ??On:Failed)>>  --return type of Iso_Variables::status
<<MONITOR_OK: : not(MONITOR_INTERFACE_FAILURE() or MONITOR_INTERNAL_FAILURE())
  and current_temperature_status=Valid >>

--monitor mode
--Assertion-function returning monitor_mode enumeration type IDs
--  NORMAL -> all okay, or less than 1.0 second since start_time
--  FAILED -> not (all okay, or less than 1.0 second since start_time)
--which is the same as: not okay and at least 1.0 second since start_time        
<<MONITOR_MODE: :=  --return type of Iso_Variables::monitor_mode
  (MONITOR_OK() or ((now-start_time) < Iso_Properties::Initialization_Timeout)
  ??NORMAL:FAILED) >>

<<INI: :(now-start_time) < Iso_Properties::Initialization_Timeout>>
<<RUN: :(now-start_time) >= Iso_Properties::Initialization_Timeout>>
**};  --end of Assertion annex library

annex EMV2
{**
	error types
	  HeaterError: type;  --heater 
	  AlarmError : type;		--the class of alarm errors
	  FalseAlarm : type extends AlarmError;  --alarm erroneously sounded
	  MissedAlarm : type extends AlarmError;  --alarm missed  
	  StatusError : type;  --mode and status errors
	  RegulatorError : type ;  
	  MonitorError : type ;  
	  RegulatorStatusError : type extends StatusError;  --indicated regulator status wrong
	  RegulatorModeError : type extends StatusError;  --regulator mode wrong
	  MonitorStatusError : type extends StatusError;  --indicated monitor status wrong
	  MonitorModeError : type extends StatusError;  --monitor mode wrong
	  ThreadFault renames type ErrorLibrary::EarlyServiceTermination;  --thread fault halts thread
	  InternalError : type;  --an internal error was detected
	  
	  InvalidTemperature: type; -- from FAA REMHB A.4 SR2 value flagged as invalid. Called IncorrectValue in FAA REMHB page 36.
	  
	  DangerousInfantExposure: type;
	  
	end types;
	error behavior FailStop
	  events fail: error event;
	  states 
	    working: initial state; 
	    failed : state;
	  transitions
	    working -[fail]-> failed;
	end behavior;
	error behavior FailStopStates
	  states 
	    working: initial state; 
	    failed : state;
	end behavior;
**};


end isolette;

