package LiftModel_Bad_Duplicate_Annex
public 
   with Base_Types;
   
thread X
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
			
	annex agree {** 
		assume "X input range" : Input < 20;
		guarantee "X output range" : Output < 2*Input;
	**};	
end X ; 
   
process A
	features
		MyInput: in data port Base_Types::Integer;
		MyOutput: out data port Base_Types::Integer;
			
	annex agree {** 
		assume "A input range" : MyInput < 20;
		guarantee "A output range" : MyOutput < 2*MyInput;
	**};
	
end A ; 

process implementation A.impl
	
	subcomponents
		xthread : thread X;
		
	connections
		INTO_X : port MyInput -> xthread.Input {Communication_Properties::Timing => immediate;};
		OUTOF_X : port xthread.Output -> MyOutput {Communication_Properties::Timing => immediate;};
		
		
	annex agree {** 
		lift contract;
	**};	
	
end A.impl ; 

system B
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
			
	annex agree {** 
		assume "B input range" : Input < 20;
		guarantee "B output range" : Output < Input + 15;
	**};	
end B ; 

system C
	features
		Input1: in data port Base_Types::Integer;
		Input2: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
			
	annex agree {** 
	  eq mode : int;
	  
	  guarantee "mode always is increasing" : mode >= 0 -> mode > pre(mode);
		guarantee "C output range" : Output = if mode = 3 then (Input1 + Input2) else 0;
	**};	
end C ; 
   
system top_level
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
	annex agree {** 
	    
	  eq mode : int;
	  
		assume "System input range " : Input < 10;
		guarantee "mode is always positive" : mode >= 0;
		guarantee "System output range" : Output < 50;
	**};	
end top_level;

system implementation top_level.Impl
	subcomponents
		A_sub : process A.impl ; 
		B_sub : system B ; 
		C_sub : system C ; 
	connections
		IN_TO_A : port Input -> A_sub.MyInput {Communication_Properties::Timing => immediate;};
		A_TO_B : port A_sub.MyOutput -> B_sub.Input {Communication_Properties::Timing => immediate;};
		A_TO_C : port A_sub.MyOutput -> C_sub.Input1 {Communication_Properties::Timing => immediate;};
		B_TO_C : port B_sub.Output -> C_sub.Input2 {Communication_Properties::Timing => immediate;};
		C_TO_Output : port C_sub.Output -> Output {Communication_Properties::Timing => immediate;}; 
		
	annex agree{**
	  assign mode = C_sub.mode;
	**};
	
end top_level.Impl;
	
end LiftModel_Bad_Duplicate_Annex;