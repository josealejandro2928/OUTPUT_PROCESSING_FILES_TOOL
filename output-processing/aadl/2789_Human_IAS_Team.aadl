package Human_IAS_Team
public
	with Types_Constants;
	renames Types_Constants::all;
	with Unreliable_Sensor_Lib;	

	-------------------------------------
	-- Human
	-------------------------------------
	
	system Human
		features
			InputFromIAS : in data port I2H.impl;
			InputFromSensor1 : in data port Sensor_Data.impl;
			InputFromSensor2 : in data port Sensor_Data.impl;
			InputFromSensor3 : in data port Sensor_Data.impl;
			Output : out data port H2I.impl;
		annex agree {**
			guarantee "Acknowledge receipt of message that Sensor1 is unreliable":
				prev(not InputFromIAS.Sensor1_Reliable, false) <=> Output.Ack_Sensor1_Unreliable;
			
			guarantee "Acknowledge receipt of message that Sensor2 is unreliable":
				prev(not InputFromIAS.Sensor2_Reliable, false) <=> Output.Ack_Sensor2_Unreliable;
				
			guarantee "Acknowledge receipt of message that Sensor3 is unreliable":
				prev(not InputFromIAS.Sensor3_Reliable, false) <=> Output.Ack_Sensor3_Unreliable;
		**};
	end Human;
	
	-------------------------------------
	-- IAS
	-------------------------------------
	
	system IAS
		features
			InputFromHuman : in data port H2I.impl;
			InputFromSensor1 : in data port Sensor_Data.impl;
			InputFromSensor2 : in data port Sensor_Data.impl;
			InputFromSensor3 : in data port Sensor_Data.impl;
			Output : out data port I2H.impl;

		annex agree {**

			eq previous_z_position : real = prev(Output.Position.Z, 0.0);
			
			eq Horizontal_Threshold : real = Unreliable_Sensor_Lib::HAL(previous_z_position);
			
			eq Vertical_Threshold : real = Unreliable_Sensor_Lib::VAL(previous_z_position);
							
			eq Sensor1_Reliable: bool, Sensor2_Reliable: bool, Sensor3_Reliable: bool = Unreliable_Sensor_Lib::Sensor_Status(InputFromSensor1, InputFromSensor2, InputFromSensor3, Horizontal_Threshold, Vertical_Threshold);
				
			guarantee "Sensor status to operator":
					(Output.Sensor1_Reliable = Sensor1_Reliable)
				and (Output.Sensor2_Reliable = Sensor2_Reliable)
				and (Output.Sensor3_Reliable = Sensor3_Reliable);			
			
			--Rather than specify how to compute the position using the good sensors, we simply require that the output position be within the threshold of all the positions measured by the good sensors.
			--Q: Is this the right guarantee, or should it be relaxed a bit? Imagine 3 good xpos sensors. Sensor 1: 2.0, Sensor 2: 5.0, Sensor 3: 8.0. Would 4.0 be a reasonable output? It's more than a 3.0 m threshold from Sensor 3.
			--Q: What should this guarantee be now that the operator can disagree with the IAS assessment?
			guarantee "Position to operator is within the threshold from all good sensors":
					(Sensor1_Reliable => Unreliable_Sensor_Lib::all_xyz_vals_within_threshold_of_each_other(
						Output.Position, InputFromSensor1.Position, Horizontal_Threshold, Vertical_Threshold
					))
				and (Sensor2_Reliable => Unreliable_Sensor_Lib::all_xyz_vals_within_threshold_of_each_other(
					Output.Position, InputFromSensor2.Position, Horizontal_Threshold, Vertical_Threshold
				))
				and (Sensor3_Reliable => Unreliable_Sensor_Lib::all_xyz_vals_within_threshold_of_each_other(
					Output.Position, InputFromSensor3.Position, Horizontal_Threshold, Vertical_Threshold
				));
						 								
		**};

	end IAS;
	
	-------------------------------------
	-- Sensors
	-------------------------------------
		
	system Sensor1
		features
			Output : out data port Position.impl;
	end Sensor1;
	
	system Sensor2
		features
			Output : out data port Position.impl;
	end Sensor2;
	
	system Sensor3
		features
			Output : out data port Position.impl;
	end Sensor3;
	
	-------------------------------------
	-- Human-Machine Team
	-------------------------------------
	
	system Top
		annex agree {**
			guarantee "Placeholder gaurantee to get AGREE to run": true;
		**};
	end Top;

	system implementation Top.impl
		subcomponents
			Human: system Human;
			IAS: system IAS;
			Sensor1: system Sensor1;
			Sensor2: system Sensor2;
			Sensor3: system Sensor3;
		connections
			Top_impl_new_connection: feature IAS.Output -> Human.InputFromIAS;
			Top_impl_new_connection2: feature Sensor1.Output -> IAS.InputFromSensor1;
			Top_impl_new_connection3: feature Sensor2.Output -> IAS.InputFromSensor2;
			Top_impl_new_connection4: feature Sensor3.Output -> IAS.InputFromSensor3;
			Top_impl_new_connection5: feature Human.Output -> IAS.InputFromHuman;
			Top_impl_new_connection6: feature Sensor1.Output -> Human.InputFromSensor1;
			Top_impl_new_connection7: feature Sensor2.Output -> Human.InputFromSensor2;
			Top_impl_new_connection8: feature Sensor3.Output -> Human.InputFromSensor3;
		annex agree{**

			--------------------------------------------
			-- OBSERVERS (We want these to be invalid.)
			--------------------------------------------
			lemma "Observer: Operator acknowledges Sensor 1 unreliable":
				not Human.Output.Ack_Sensor1_Unreliable;
				
			lemma "Observer: IAS flags Sensor 1 unreliable":
				IAS.Output.Sensor1_Reliable;
				
			lemma "Observer: All sensors reliable":
				not (	IAS.Output.Sensor1_Reliable
					and IAS.Output.Sensor2_Reliable
					and IAS.Output.Sensor3_Reliable);
					
			lemma "Observer: All sensors unreliable":
					IAS.Output.Sensor1_Reliable
				or 	IAS.Output.Sensor2_Reliable
				or 	IAS.Output.Sensor3_Reliable;
			
			------------------------------------------------------------------------------
			-- LEMMAS (These should be true based on the guarantees of the subcomponents.)
			------------------------------------------------------------------------------
				
			lemma "Operator acknowledges unreliable sensor alerts": 
					(prev(not IAS.Output.Sensor1_Reliable, false) <=> Human.Output.Ack_Sensor1_Unreliable)
				and (prev(not IAS.Output.Sensor2_Reliable, false) <=> Human.Output.Ack_Sensor2_Unreliable)
				and (prev(not IAS.Output.Sensor3_Reliable, false) <=> Human.Output.Ack_Sensor3_Unreliable);
				
			lemma "We can't have just Sensor 1 reliable":
				not (	 IAS.Output.Sensor1_Reliable and not IAS.Output.Sensor2_Reliable and not IAS.Output.Sensor3_Reliable);
			
			lemma "We can't have just Sensor 2 reliable":
				not (not IAS.Output.Sensor1_Reliable and 	 IAS.Output.Sensor2_Reliable and not IAS.Output.Sensor3_Reliable);
							
			lemma "We can't have just Sensor 3 reliable":
				not (not IAS.Output.Sensor1_Reliable and not IAS.Output.Sensor2_Reliable and 	 IAS.Output.Sensor3_Reliable);
			
			
		**};
	end Top.impl;
	
	
end Human_IAS_Team;
