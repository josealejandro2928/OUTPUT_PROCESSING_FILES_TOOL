package Execute_Soundness
  public 
    with SMACCM;
    with UAV;
    
    annex resolute {**

only_receive_gs(x : component) <=
  ** x " only receives messages from the Ground Station" **
  only_gs_encrypt() and only_receive_decrypt(x)

only_gs_encrypt() <=
  ** "Only the Ground Station can send messages that pass Decrypt" ** 
  authenticated_encryption(encrypt_algorithm) and private_key()

-- The encryption algorithm used by the Ground Station and Decrypt is e.
encrypt_algorithm : string =
  property(SOFTWARE::Decrypt, SMACCM::Encryption_Algorthim) 

authenticated_encryption(e : string) <= 
  ** "The encryption algorithm " e " is strong and authenticated. "
     "Messages cannot be forged or manipulated" **
  e = "AES-128-GCM" or e = "AES-128-CTR-HMAC-SHA1"

private_key() <=
  ** "The encryption key is private to the UAV and Ground Station" **
  key_randomly_generated() and gs_private_key() and transmit_private_key() and uav_private_key()

key_randomly_generated() <=
  ** "The encryption key is randomly generated and cannot be guessed" **
  true

gs_private_key() <=
  ** "The Ground Station does not leak the encryption key" **
  true

transmit_private_key() <=
  ** "The encryption key is securely transmitted to the UAV and Ground Station" **
  true
 
uav_private_key() <=
  ** "The UAV does not leak the encryption key" **
  true

-- The component x only receives messages that pass Decrypt.
only_receive_decrypt(x : component) <=
  ** "The component " x " only receives messages that pass Decrypt" **
  forall (c : connection).  
    (parent(destination(c)) = x) =>
      non_command_channel(c) or only_receive_decrypt_channel(c)
    
only_receive_decrypt_channel(c : connection) <=
  ** "The connection " c " only carries messages that pass Decrypt" **
  let src : component = parent(source(c));
  unalterable_channel(c) and (is_decrypter(src) or only_receive_decrypt(src))      

is_decrypter(comp : component) <=
  ** comp " is the decrypter" **
  type(comp) = SOFTWARE::Decrypt

non_command_channel(c : connection) <=
  ** "The connection " c " only carries sensor data" **
  has_type(c) and type(c) = DATATYPES::Sensor_Data.Impl

-- The connection c delivers data without alteration.
-- "contained" means write permissions
unalterable_channel(c : connection) <=
  ** "The connection " c " delivers data without alteration" **
  exists (p : process).
  	contained(source(c), p) and
  	contained(destination(c), p) and
  	memory_protected(p)

memory_protected(p : process) <=
  ** "The memory of process " p " is protected from alterations by other processes" **
  property(p, SMACCM::OS) = "SeL4" or
  (property(p, SMACCM::OS) = "Breakaway-RTOS" and
   forall (mem : memory). bound(p, mem) =>
     forall (q : process). bound(q, mem) => memory_safe_process(q))

memory_safe_process(p : process) <=
  ** "The process " p " only writes to its own memory space" **
  forall (t : thread). contained(t, p) => memory_safe_thread(t)

memory_safe_thread(t : thread) <=
  ** "The thread " t " only writes to its own memory space" **
  ivory_thread(t)
  
ivory_thread(t : thread) <=
  ** "The thread " t " is generated from Ivory" **
  property(t, SMACCM::Language) = "Ivory"
  
**};
    
end Execute_Soundness;
