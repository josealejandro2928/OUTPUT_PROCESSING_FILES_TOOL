-- AADL Test 2: active -> passive threads using struct send.

package test2
public 
   with Base_Types;
   with SMACCM_SYS;   
   with Data_Model;

data a_struct
  properties
    Data_Model::Data_Representation => Struct;
end a_struct;

data implementation a_struct.impl
  subcomponents
    field1 : data Base_Types::Float;
    field2 : data Base_Types::Float;
end a_struct.impl;

-- Example of a periodically dispatched "Active" thread.   
thread sender
	features
		Output1: out event data port a_struct.impl {
	      SMACCM_SYS::CommPrim_Source_Text => "ping_Output1";			
		};
	
	properties 
	    Dispatch_Protocol => Periodic;
	    Period => 100 ms;
		Source_Text => ("user_code/user_sender.c");
	    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("periodic_ping");
	    Priority => 10;
	    Stack_Size => 256 bytes;
	    SMACCM_SYS::Thread_Type => Active ;
	    Compute_Execution_Time => 10 us .. 50 us;
	    SMACCM_SYS::Sends_Events_To => "{{1 Output1}}";
end sender ; 

-- Example of a periodically dispatched "Active" thread.   
thread receiver
	features
		Input1: in event data port a_struct.impl {
	      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("ping_received");
	      Source_Text => ("user_code/user_receiver.c");
		}; 
		
	properties 
	    Dispatch_Protocol => Aperiodic;
	    SMACCM_SYS::Thread_Type => Passive ;  -- Change to 'Monitor'
	    Compute_Execution_Time => 10 us .. 50 us;
	    SMACCM_SYS::Sends_Events_To => "{{}}";
end receiver ; 

process proc

end proc;

process implementation proc.Impl
	subcomponents
		s: thread sender;
		r: thread receiver;
	connections
		s_to_r : port s.Output1 -> r.Input1;
end proc.Impl;

system test2
end test2;

system implementation test2.impl
	subcomponents
		tl: process proc.Impl;
	properties
		SMACCM_SYS::OS => CAmkES;
		SMACCM_SYS::HW => QEMU;
end test2.impl;

end test2;