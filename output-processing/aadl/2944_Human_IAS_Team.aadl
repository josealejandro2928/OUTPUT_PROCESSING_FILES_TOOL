package Human_IAS_Team
public
	with Types_Constants;
	renames Types_Constants::all;
	with Unreliable_Sensor_Lib;	

	-------------------------------------
	-- Human
	-------------------------------------
	
	system Human
		features
			InputFromIAS : in data port I2H.impl;
			InputFromSensor1 : in data port Sensor_Data.impl;
			InputFromSensor2 : in data port Sensor_Data.impl;
			InputFromSensor3 : in data port Sensor_Data.impl;
			Output : out data port H2I.impl;
		annex agree {**
			guarantee "Respond to message that Sensor1 is unreliable":
				prev(not InputFromIAS.Sensor1_Reliable, false) <=> ((Output.Sensor1_Unreliable_Response = enum(Response, Agree)) or (Output.Sensor1_Unreliable_Response = enum(Response, Disagree))); 
			
			guarantee "Respond to message that Sensor2 is unreliable":
				prev(not InputFromIAS.Sensor2_Reliable, false) <=> ((Output.Sensor2_Unreliable_Response = enum(Response, Agree)) or (Output.Sensor2_Unreliable_Response = enum(Response, Disagree)));
			
			guarantee "Respond to message that Sensor3 is unreliable":
				prev(not InputFromIAS.Sensor3_Reliable, false) <=> ((Output.Sensor3_Unreliable_Response = enum(Response, Agree)) or (Output.Sensor3_Unreliable_Response = enum(Response, Disagree)));		
				
		**};
	end Human;
	
	-------------------------------------
	-- IAS
	-------------------------------------
	
	system IAS
		features
			InputFromHuman : in data port H2I.impl;
			InputFromSensor1 : in data port Sensor_Data.impl;
			InputFromSensor2 : in data port Sensor_Data.impl;
			InputFromSensor3 : in data port Sensor_Data.impl;
			Output : out data port I2H.impl;

		annex agree {**

			eq previous_active_sensor : int = prev(Output.Active_Sensor, 1);
			
			eq previous_recommended_sensor : int = prev(Output.Recommended_Sensor, 1);

			eq previous_z_position : real = if (previous_active_sensor = 1) then 
												prev(InputFromSensor1.Position.Z, 0.0)
											else if (previous_active_sensor = 2) then
													prev(InputFromSensor2.Position.Z, 0.0)
												 else --(previous_active_sensor = 3)
												 	prev(InputFromSensor3.Position.Z, 0.0);
			
			eq Horizontal_Threshold : real = Unreliable_Sensor_Lib::HAL(previous_z_position);
			
			eq Vertical_Threshold : real = Unreliable_Sensor_Lib::VAL(previous_z_position);
							
			eq Sensor1_Reliable: bool, Sensor2_Reliable: bool, Sensor3_Reliable: bool = Unreliable_Sensor_Lib::Sensor_Status(InputFromSensor1, InputFromSensor2, InputFromSensor3, Horizontal_Threshold, Vertical_Threshold);
				
			guarantee "Sensor status to operator":
					(Output.Sensor1_Reliable = Sensor1_Reliable)
				and (Output.Sensor2_Reliable = Sensor2_Reliable)
				and (Output.Sensor3_Reliable = Sensor3_Reliable);			
			
			--Should we instead pick one of the three on some other criteria?
			guarantee "Recommended sensor is NIL if and only if all sensors are unreliable":
					Output.Recommended_Sensor = NIL <=> (not Sensor1_Reliable and not Sensor2_Reliable and not Sensor3_Reliable);
			
			guarantee "The recommended sensor is a reliable sensor, unless it is NIL":
					not (Output.Recommended_Sensor = NIL) =>
						(
							   (Output.Recommended_Sensor = 1 and Sensor1_Reliable)
							or (Output.Recommended_Sensor = 2 and Sensor2_Reliable)
							or (Output.Recommended_Sensor = 3 and Sensor3_Reliable)
						);
						
			guarantee "The recommended sensor is the active sensor unless the active sensor has become unreliable":			
					(		(previous_active_sensor = 1 and Output.Sensor1_Reliable)
						or 	(previous_active_sensor = 2 and Output.Sensor2_Reliable)
						or 	(previous_active_sensor = 3 and Output.Sensor3_Reliable)
					)
						=> (Output.Recommended_Sensor = previous_active_sensor);
			
			guarantee "The active sensor should stay the same unless the operator agrees that it is unreliable and there is another reliable sensor available.":
					Output.Active_Sensor = 	if (previous_recommended_sensor = NIL) then
												previous_active_sensor
											else if (previous_active_sensor = 1 and InputFromHuman.Sensor1_Unreliable_Response = enum(Response, Agree)) then
													previous_recommended_sensor
												 else if (previous_active_sensor = 2 and InputFromHuman.Sensor2_Unreliable_Response = enum(Response, Agree)) then
														previous_recommended_sensor
													  else if (previous_active_sensor = 3 and InputFromHuman.Sensor3_Unreliable_Response = enum(Response, Agree)) then
																previous_recommended_sensor
														   else
														   		previous_active_sensor;
						 								
		**};

	end IAS;
	
	-------------------------------------
	-- Sensors
	-------------------------------------
		
	system Sensor1
		features
			Output : out data port Position.impl;
	end Sensor1;
	
	system Sensor2
		features
			Output : out data port Position.impl;
	end Sensor2;
	
	system Sensor3
		features
			Output : out data port Position.impl;
	end Sensor3;
	
	-------------------------------------
	-- Human-Machine Team
	-------------------------------------
	
	system Top
		annex agree {**
			guarantee "Placeholder gaurantee to get AGREE to run": true;
		**};
	end Top;

	system implementation Top.impl
		subcomponents
			Human: system Human;
			IAS: system IAS;
			Sensor1: system Sensor1;
			Sensor2: system Sensor2;
			Sensor3: system Sensor3;
		connections
			Top_impl_new_connection: feature IAS.Output -> Human.InputFromIAS;
			Top_impl_new_connection2: feature Sensor1.Output -> IAS.InputFromSensor1;
			Top_impl_new_connection3: feature Sensor2.Output -> IAS.InputFromSensor2;
			Top_impl_new_connection4: feature Sensor3.Output -> IAS.InputFromSensor3;
			Top_impl_new_connection5: feature Human.Output -> IAS.InputFromHuman;
			Top_impl_new_connection6: feature Sensor1.Output -> Human.InputFromSensor1;
			Top_impl_new_connection7: feature Sensor2.Output -> Human.InputFromSensor2;
			Top_impl_new_connection8: feature Sensor3.Output -> Human.InputFromSensor3;
		annex agree{**

			--------------------------------------------
			-- EQ (STATE VARIABLES)
			--------------------------------------------
			eq previous_active_sensor : int = prev(IAS.Output.Active_Sensor, 1);
			
			eq previous_recommended_sensor : int = prev(IAS.Output.Recommended_Sensor, 1);
			
			eq reliable_sensor_available : bool = IAS.Output.Sensor1_Reliable or IAS.Output.Sensor2_Reliable or IAS.Output.Sensor3_Reliable; 

			--------------------------------------------
			-- OBSERVERS (We want these to be invalid.)
			--------------------------------------------

			lemma "Observer: Operator agrees that Sensor 1 is unreliable":
				not (Human.Output.Sensor1_Unreliable_Response = enum(Response, Agree));
				
			lemma "Observer: IAS flags Sensor 1 unreliable":
				IAS.Output.Sensor1_Reliable;
				
			lemma "Observer: All sensors reliable":
				not (	IAS.Output.Sensor1_Reliable
					and IAS.Output.Sensor2_Reliable
					and IAS.Output.Sensor3_Reliable);
					
			lemma "Observer: All sensors unreliable":
					IAS.Output.Sensor1_Reliable
				or 	IAS.Output.Sensor2_Reliable
				or 	IAS.Output.Sensor3_Reliable;
			
			lemma "Observer: The active sensor changes":
				IAS.Output.Active_Sensor = prev(IAS.Output.Active_Sensor,1);
				
			------------------------------------------------------------------------------
			-- LEMMAS (These should be true based on the guarantees of the subcomponents.)
			------------------------------------------------------------------------------
			
			lemma "Operator responds to unreliable sensor alerts": 
					(prev(not IAS.Output.Sensor1_Reliable, false) <=> ((Human.Output.Sensor1_Unreliable_Response = enum(Response, Agree)) or (Human.Output.Sensor1_Unreliable_Response = enum(Response, Disagree))))
				and (prev(not IAS.Output.Sensor2_Reliable, false) <=> ((Human.Output.Sensor2_Unreliable_Response = enum(Response, Agree)) or (Human.Output.Sensor2_Unreliable_Response = enum(Response, Disagree))))
				and (prev(not IAS.Output.Sensor3_Reliable, false) <=> ((Human.Output.Sensor3_Unreliable_Response = enum(Response, Agree)) or (Human.Output.Sensor3_Unreliable_Response = enum(Response, Disagree))));
							
			lemma "We can't have just Sensor 1 reliable":
				not (	 IAS.Output.Sensor1_Reliable and not IAS.Output.Sensor2_Reliable and not IAS.Output.Sensor3_Reliable);
			
			lemma "We can't have just Sensor 2 reliable":
				not (not IAS.Output.Sensor1_Reliable and 	 IAS.Output.Sensor2_Reliable and not IAS.Output.Sensor3_Reliable);
							
			lemma "We can't have just Sensor 3 reliable":
				not (not IAS.Output.Sensor1_Reliable and not IAS.Output.Sensor2_Reliable and 	 IAS.Output.Sensor3_Reliable);
			
			lemma "Unless the active sensor becomes unreliable, the recommended sensor is the current active sensor":
						(		(previous_active_sensor = 1 and IAS.Output.Sensor1_Reliable)
							or 	(previous_active_sensor = 2 and IAS.Output.Sensor2_Reliable)
							or 	(previous_active_sensor = 3 and IAS.Output.Sensor3_Reliable))
						=> (IAS.Output.Recommended_Sensor = previous_active_sensor);
			
			lemma "If the operator agrees that the active sensor is unreliable, the new active sensor is the previously recommended sensor, unless the previously recommended sensor was NIL":
				previous_recommended_sensor != NIL =>
					(	((previous_active_sensor = 1 and Human.Output.Sensor1_Unreliable_Response = enum(Response, Agree)) => 
						IAS.Output.Active_Sensor = previous_recommended_sensor
						)
					and ((previous_active_sensor = 2 and Human.Output.Sensor2_Unreliable_Response = enum(Response, Agree)) => 
						IAS.Output.Active_Sensor = previous_recommended_sensor
						)
					and ((previous_active_sensor = 3 and Human.Output.Sensor3_Unreliable_Response = enum(Response, Agree)) => 
						IAS.Output.Active_Sensor = previous_recommended_sensor
						)
					);
			
			lemma "If the operator disagrees that the active sensor is unreliable, then the active sensor should not change.":
					(	(previous_active_sensor = 1 and Human.Output.Sensor1_Unreliable_Response = enum(Response, Disagree))
					or  (previous_active_sensor = 2 and Human.Output.Sensor2_Unreliable_Response = enum(Response, Disagree))
					or 	(previous_active_sensor = 3 and Human.Output.Sensor3_Unreliable_Response = enum(Response, Disagree))
					) 
					=>
					IAS.Output.Active_Sensor = previous_active_sensor;
					
			lemma "If an unreliable sensor is the active sensor, it must be the case that either 
				the pilot disagreed with the IAS assessment 
				or the sensor just became unreliable on this timestep 
				or there was no reliable sensor available on the previous timestep":
							((IAS.Output.Active_Sensor = 1) and not IAS.Output.Sensor1_Reliable) 
								=>  (	(Human.Output.Sensor1_Unreliable_Response = enum(Response, Disagree)) 
									or 	prev(IAS.Output.Sensor1_Reliable, true) 
									or not prev(reliable_sensor_available, true)
									)
						and ((IAS.Output.Active_Sensor = 2) and not IAS.Output.Sensor2_Reliable) 
								=>  (	(Human.Output.Sensor2_Unreliable_Response = enum(Response, Disagree)) 
									or 	prev(IAS.Output.Sensor2_Reliable, true) 
									or 	not prev(reliable_sensor_available, true)
									)
						and ((IAS.Output.Active_Sensor = 3) and not IAS.Output.Sensor3_Reliable) 
								=>  (	(Human.Output.Sensor3_Unreliable_Response = enum(Response, Disagree)) 
									or 	prev(IAS.Output.Sensor3_Reliable, true) 
									or not prev(reliable_sensor_available, true)
								);
								
			lemma "Active sensor in range":
					IAS.Output.Active_Sensor >= 1 and IAS.Output.Active_Sensor <= 3;
			
			lemma "Recommended active sensor in range":
					IAS.Output.Recommended_Sensor >= 0 and IAS.Output.Recommended_Sensor <= 3;
			------------------------------------------------------------------------------
			-- INVALID LEMMAS (These are notably invalid.)
			------------------------------------------------------------------------------
			
			lemma "Invalid (because the operator may disagree): The active sensor is always a reliable sensor (on the previous timestep) when a reliable sensor is available":
					true -> (pre(reliable_sensor_available)
							=>
							(	(IAS.Output.Active_Sensor = 1 => pre(IAS.Output.Sensor1_Reliable))
							and (IAS.Output.Active_Sensor = 2 => pre(IAS.Output.Sensor2_Reliable))
							and (IAS.Output.Active_Sensor = 3 => pre(IAS.Output.Sensor3_Reliable))));
			
		**};
	end Top.impl;
	
	
end Human_IAS_Team;
