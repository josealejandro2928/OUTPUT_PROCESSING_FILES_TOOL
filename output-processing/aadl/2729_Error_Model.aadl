package pacemaker_modes
public
	
with EMV2;

system pacemaker
end pacemaker;

system implementation pacemaker.impl
	subcomponents
		PULSE_GENERATOR: system Pulse_Generator;
		    ATRIAL_LEAD: device Atrial_Lead;
		 VENTRICLE_LEAD: device Ventricle_Lead;
		 DEVICE_CONTROLLER_MONITOR: system Device_Controller_Monitor.impl;
		  
	connections
		c1: port VENTRICLE_LEAD.Ventricel_Sense -> PULSE_GENERATOR.V_sense;
		c2: port PULSE_GENERATOR.V_pulse -> VENTRICLE_LEAD.Ventricle_Pace;
		c3: port ATRIAL_LEAD. Atrial_Sense -> PULSE_GENERATOR.A_sense;
		c4: port PULSE_GENERATOR.A_pulse -> ATRIAL_LEAD.Atrial_Pace;
		c5: port DEVICE_CONTROLLER_MONITOR. Configuration -> PULSE_GENERATOR.Configuration;
		c6: port PULSE_GENERATOR.Monitoring -> DEVICE_CONTROLLER_MONITOR.Monitoring;
	properties
	 Actual_Processor_Binding => ( reference(DEVICE_CONTROLLER_MONITOR.Pacemaker_HW_Platform) ) applies to DEVICE_CONTROLLER_MONITOR.Pacemaker_SW;
	
end pacemaker.impl;

annex EMV2
{**
	error types
	  ServiceError: type;
	  ItemOmission: type extends ServiceError; 
	  ServiceOmission: type extends ServiceError;
	  SequenceOmission: type extends ServiceError;
	  TransientServiceOmission: type extends SequenceOmission;
	  LateServiceStart: type extends SequenceOmission;
	  EarlyServiceTermination: type extends SequenceOmission;
	  BoundedOmissionInterval: type extends SequenceOmission; 
	  ItemCommission: type extends ServiceError; 
	  ServiceCommission: type extends ServiceError;
	  SequenceCommission: type extends ServiceError;
	  EarlyServiceStart: type extends SequenceCommission;
	  LateServiceTermination: type extends SequenceCommission;

	end types;
	error behavior FailStop
	  use types pacemaker_modes;
	  events fail: error event;
	  states 
	    working: initial state; 
	    failed : state;
	  transitions
	    working -[fail]-> failed;
	end behavior;
**};

system Pulse_Generator
	features
		V_sense: in event port;
		V_pulse: out event port;
		A_sense: in event port;
		A_pulse: out event port;
		Configuration: in event port;
		Monitoring: out event port;
		
end Pulse_Generator;

system implementation Pulse_Generator.impl
	subcomponents
		ACCELEROMETER: device Acelerometer;
		      BATTERY: device Battery;
		      CONTROL: device Determine_Rhythm;
	connections
		cx1: port BATTERY.Status -> ACCELEROMETER. Battery_Level;
		cx2: port V_sense -> CONTROL.rhythm_in;
		cx3: port A_sense -> CONTROL.rhythm_in;
		cx4: port ACCELEROMETER.Pacing_Rate -> V_pulse;
		cx5: port ACCELEROMETER.Pacing_Rate -> A_pulse;
		cx6: port Configuration -> ACCELEROMETER. Cofig_Rate;
		cx7: port ACCELEROMETER.Measuring_Rate -> Monitoring;
		cx8: port CONTROL.rhythm_out-> ACCELEROMETER.Sensing_Rate;
	
end Pulse_Generator.impl;


device Determine_Rhythm
	features
		rhythm_out: out event port;
		rhythm_in: in event port;
		
end Determine_Rhythm;

device implementation Determine_Rhythm.impl
end Determine_Rhythm.impl;

device Atrial_Lead
	features
		Atrial_Sense: out event port;
		 Atrial_Pace: in event port;
		
end Atrial_Lead;

device implementation Atrial_Lead.impl
end Atrial_Lead.impl;

device Ventricle_Lead
	features
		Ventricel_Sense: out event port;
		Ventricle_Pace: in event port;
end Ventricle_Lead;

device implementation Ventricle_Lead.impl
end Ventricle_Lead.impl;

system Device_Controller_Monitor
	features
		Configuration: out event port;
		   Monitoring: in event port;
annex EMV2 
  {** 
    use types ErrorLibrary, pacemaker_modes;
 	error propagations
		Configuration : out propagation {ItemValueError};
		Monitoring : in propagation {ItemValueError};
	flows
		f1 : error source Configuration{ItemValueError};
	end propagations;
  **};
end Device_Controller_Monitor;

system implementation Device_Controller_Monitor.impl
	subcomponents
		PACEMAKER_SW: process Pacemaker_SW;
		PACEMAKER_HW_PLATFORM: processor Pacemaker_HW_Platform;
	connections
		cnn1: port Monitoring -> PACEMAKER_SW.Measuring_Sensing;
		cnn2: port PACEMAKER_SW.Configuring_Pacing -> Configuration;
end Device_Controller_Monitor.impl;

thread thr_sender
features
	V_sense : out event port;
	A_sense : out event port;
annex EMV2 {**
	use types ErrorLibrary;
	error propagations
		V_sense : out propagation {SequenceValueError};
		A_sense : out propagation {SequenceValueError};
	flows
		f1 : error source V_sense{SequenceValueError};
		f2 : error source A_sense{SequenceValueError};
	end propagations;
**};
end thr_sender;

thread implementation thr_sender.impl
end thr_sender.impl;

thread thr_receiver
features
	rhythm_in: in event port;
end thr_receiver;

thread implementation thr_receiver.impl
end thr_receiver.impl;

process CONTROL_SW
	features
		rhythm_in: in event port;
		rhythm_out: out event port;
	modes
	nominal : initial mode;
	recovery: mode;
end CONTROL_SW;

process implementation CONTROL_SW.impl
subcomponents
	thr1 : thread thr_receiver.impl in modes (nominal,recovery);
	thr2 : thread thr_receiver.impl in modes (recovery);
internal features
	triggerrecovery: event;
	triggernormal: event;
connections
	c1 : port rhythm_in -> thr1.rhythm_in;
	c2 : port rhythm_in -> thr2.rhythm_in;
modes
	nominal-[triggerrecovery]->recovery;
	recovery-[triggernormal]->nominal;
annex EMV2 {**
	use types ErrorLibrary;
	use behavior ErrorLibrary::FailStop;
	
	error propagations
		rhythm_in : in propagation{SequenceValueError};
	flows
		f1 : error sink rhythm_in{SequenceValueError};
	end propagations;
	
	component error behavior
	transitions
		t1 : Operational -[rhythm_in{SequenceValueError}]-> FailStop;
		t2 : FailStop -[rhythm_in{NoError}]-> Operational;
	end component;
**};
end CONTROL_SW.impl;

process implementation CONTROL_SW.with_transitions extends CONTROL_SW.impl
annex EMV2 {**
	component error behavior
	detections
		Operational-[rhythm_in{SequenceValueError}]->triggerrecovery!;
		FailStop-[rhythm_in{NoError}]->triggernormal!;
	end component;
**};
end CONTROL_SW.with_transitions;


process implementation CONTROL_SW.with_mappings extends CONTROL_SW.impl
annex EMV2 {**
	component error behavior
	mode mappings
		Operational in modes (nominal);
		FailStop	in modes (recovery);
	end component;
**};
end CONTROL_SW.with_mappings;

process Pacemaker_SW
	features
		Measuring_Sensing: in event port;
		Configuring_Pacing: out event port;
end Pacemaker_SW;

process implementation Pacemaker_SW.impl
	subcomponents
		DDD_MODE: thread DDD_Mode;
		AAI_MODE: thread AAI_Mode;
		CONTROL_MODE: thread Control_Mode;
	connections
		ct1: port Measuring_Sensing -> DDD_MODE.Sensing_DDD;
		ct2: port Measuring_Sensing -> AAI_MODE.Sensing_AAI;
		ct3: port DDD_MODE.Pacing_DDD -> Configuring_Pacing;
		ct4: port AAI_MODE.Pacing_AAI -> Configuring_Pacing;
		ct5: port DDD_MODE.SW_ERR -> CONTROL_MODE. DDD_SW_ERR;
		ct6: port CONTROL_MODE.AAI_SW_ERR -> AAI_MODE.SW_ERR;
end Pacemaker_SW.impl;

processor Pacemaker_HW_Platform
end Pacemaker_HW_Platform;

processor implementation Pacemaker_HW_Platform.impl
end Pacemaker_HW_Platform.impl;

device Acelerometer
	features
		Sensing_Rate: in event port;
		Pacing_Rate: out event port;
		Battery_Level: in event port;
		Cofig_Rate : in event port;
		Measuring_Rate: out event port;
end Acelerometer;

device Battery
	features
		Status: out event port;
end Battery;

thread DDD_Mode
	features
		Sensing_DDD: in event port;
		Pacing_DDD: out event port;
		SW_ERR: out event port;
annex EMV2 
  {** 
    use types ErrorLibrary, pacemaker_modes;
 	error propagations
		Pacing_DDD : out propagation {ItemValueError};
		SW_ERR : out propagation {ItemValueError};
		Sensing_DDD : in propagation {ItemValueError};
	flows
		f1 : error source Pacing_DDD{ItemValueError};
		f2 : error source SW_ERR{ItemValueError};
	end propagations;
  **};
end DDD_Mode;

thread implementation DDD_Mode.impl
end DDD_Mode.impl;
	
thread AAI_Mode
	features
		Sensing_AAI: in event port;
		Pacing_AAI: out event port;
		SW_ERR: in event port;
annex EMV2 
  {** 
    use types ErrorLibrary, pacemaker_modes;
 	error propagations
		Pacing_AAI : out propagation {ItemValueError};
		Sensing_AAI: in propagation {ItemValueError};
		SW_ERR : in propagation {ItemValueError};
	flows
		f1 : error source Pacing_AAI{ItemValueError};
	end propagations;
  **};
end AAI_Mode;

thread implementation AAI_Mode.impl
end AAI_Mode.impl;

thread Control_Mode
	features
		DDD_SW_ERR: in event port;
		AAI_SW_ERR: out event port;
	modes
		DDD : initial mode;
		AAI: mode;
		DDD -[DDD_SW_ERR]-> AAI;
end Control_Mode;


end pacemaker_modes;