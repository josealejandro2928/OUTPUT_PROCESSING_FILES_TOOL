package test
public
  with Data_Model;
  with Base_Types;
  with SMACCM_SYS;


-- Datatypes: these would likely go into a separate file.
data dt
end dt;

data implementation dt.rec
	subcomponents
		field: data Base_Types::Unsigned_8;
end dt.rec;

thread Thread_A
    features
      foo_data: out data port dt.rec;
	  shared_dt: requires data access dt.rec;
	        
    properties
	  Dispatch_Protocol => Periodic;
      Period => 500 ms;
      Priority => 10;
      Source_Stack_Size => 64 bytes;
      Priority => 10; 
      Source_Text => ("src/test.c");
      Initialize_Entrypoint_Source_Text => "init_A";
       Compute_Entrypoint_Source_Text => "exec_periodic_thread_A";
  	  Compute_Execution_Time             => 2 ms .. 3 ms;
end Thread_A;

-- For 'timed' threads, the period is a timeout value if 
-- an event does not arrive.  
thread Thread_B
    features
      datap: in data port dt.rec;
      shared_dt: requires data access dt.rec 
      { Access_Right => write_only; };
      
    properties
	  Dispatch_Protocol => Periodic;
      Period => 250 ms;
      Priority => 8 ; 
      Source_Stack_Size => 64 bytes;
      Source_Text => ("src/test.c");
      Initialize_Entrypoint_Source_Text => "init_B";
      Compute_Entrypoint_Source_Text => "exec_periodic_thread_B";
  	  Compute_Execution_Time             => 0 ms .. 5 ms;
end Thread_B;



process system_proc
	-- features 
		--shared_dt: requires data access dt.rec;
end system_proc;

process implementation system_proc.Impl
    subcomponents
		A : thread Thread_A ;
		B : thread Thread_B ; 
		shared_var: data dt.rec;
		
    connections
      port A.foo_data -> B.datap;
	  data access shared_var -> B.shared_dt;
	  data access shared_var -> A.shared_dt;
	  
end system_proc.Impl;

system Test
end Test ; 

system implementation Test.Impl
	subcomponents 
		P: process system_proc.Impl;
		shared_var: data dt.rec;
	
	-- connections
		-- data access shared_var -> P.shared_dt;
    -- properties
      -- Source_Text => ("src/foobar.c","src/obj.o");
end Test.Impl;
  
end test ; 