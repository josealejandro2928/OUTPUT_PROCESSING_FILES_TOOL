package Execute_Completeness
public
annex resolute {**
		
-- Each good message received by the vehicle SHALL 
-- be executed by the vehicle within 100 ms 

-- Context: 'received' means message is in the radio output buffer
-- Context: 'good' means message is recent, authorized, and well-formed.
-- Context: 'executed' means reaching the UAV controller input buffer.
execute_completeness(d : device) <= 
 **  "The system executes in less than 100ms, "
     "and all messages that are received by device " d
     "eventually reach the controller" ** 
  total_time_bounded(total_time_delay, 100ms) and
  good_messages_reach_controller(d)

total_time_bounded(delay : int, bound : int) <=
  ** "The total time delay " delay " (picoseconds) is bounded by " bound " (picoseconds)" **
  delay <= bound

-- Under the assumption that the system is schedulable, the total time
-- delay will be the sum of the worst case execution times of all the threads
total_time_delay : int = 
  if analysis("schedule") then 
    wc_message_wait_time + 
    wc_message_processing_time + 
    wc_controller_delay
  else  
    fail "unable to schedule model"

-- calculates the sum of all thread processing times
wc_message_processing_time : int = 
	sum({thread_message_processing_time(t) for (t: thread)}) 

--returns the processing time of an individual thread
thread_message_processing_time(t : thread) : int =
	if exists(c : connections(t)) . command_channel(c) then 
		if has_property(t, SMACCM::WC_Execution_Time) then
	 	   property(t, SMACCM::WC_Execution_Time)
		else
	  	   fail "Some thread contains a message channel but does not
	  	   		 have a specified message processing time."
	else
	   0
	           
-- The connection c potentially carries commands
-- Non command datatypes must be explicitly whitelisted here
command_channel(c : connection) : bool =
  (not has_type(c)) or
  (type(c) <> DATATYPES::Sensor_Data.Impl)
	   
-- TODO: Figure out how to compute these 
wc_message_wait_time : int = 0
wc_controller_delay : int = 0  

--------------------- BEGIN MESSAGING STUFF --------------------

-- Each good message received by component x SHALL reach the UAV
-- controller input buffer
good_messages_reach_controller(x : component) <= 
  ** "All good messages sent from " x " eventually reach the controller" ** 
  type(x) = SOFTWARE::Stability_Navigation or
  exists (y : component) (c : connections(x)).
  	  connected(x, c, y) and
  	  command_channel(c) and  
      all_good_messages_sent(x, c) and
        good_messages_reach_controller(y)
     
-- messages must only be transferred through threads that
-- share a process with only memory safe threads. We also 
-- verify that all the messages are sent through one connection
all_good_messages_sent(x : component, c : connection) <=
    ** c " is the only output message channel in " x ". Only good messages "
       "are sent on this connection. All other threads "
       "in the same process of this thread are memory safe" ** 
	(forall(t : thread). 
		x = t =>
			exists(p : process).
				contained(t, p) and memory_safe_process(p))
	and
	((has_property(x, SMACCM::Always_Sends_Message) and  
	  property(x, SMACCM::Always_Sends_Message)) 
	  or type(x) = SOFTWARE::Decrypt)
	  

schedulable(p : component) <=
  ** p " is schedulable" ** 
  analysis("schedule")
**};
end Execute_Completeness;