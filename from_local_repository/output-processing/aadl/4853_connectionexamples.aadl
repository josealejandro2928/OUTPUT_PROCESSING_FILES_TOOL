
--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--@@ Section 9.1.1 Port connections
--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




-- A simple example showing a system with two processes and threads.
-- The threads have a semantic connection.
-- The connection declarations follow the containment hierarchy.
data Alpha_Type
  properties
     Source_Data_Size => 256 B;
end Alpha_Type;
port group xfer_plug
features
   Alpha : out data port Alpha_Type;
   Beta : in data port Alpha_Type;
end xfer_plug ;

port group xfer_socket
inverse of xfer_plug
end xfer_socket ;


thread P
 features
   Data_Source : out data port Alpha_Type;
end P;

thread implementation P.Impl
properties
  Dispatch_Protocol=>Periodic;
  Period=> 10 ms;
end P.Impl;

process A
 features
   Produce : port group xfer_plug;
end A;

process implementation A.Impl
 subcomponents
   Producer : thread P.Impl; 
   Result_Consumer : thread Q.Impl;
connections
   data port Producer.Data_Source -> Produce.Alpha;
   data port Produce.Beta -> Result_Consumer.Data_Sink;
end A.Impl;

thread Q
 features
   Data_Sink : in data port Alpha_Type;
end Q;

thread implementation Q.Impl
properties
  Dispatch_Protocol=>Periodic;
  Period=> 10 ms;
end Q.Impl;

process B
 features
   Consume : port group xfer_socket;
end B;

process implementation B.Impl
 subcomponents
   Consumer : thread Q.Impl; 
   Result_Producer : thread P.Impl;
connections
   data port Consume.Alpha -> Consumer.Data_Sink;
   data port Result_Producer.Data_Source -> Consume.Beta;
end B.Impl;

system Simple
end Simple;

system implementation Simple.Impl
  subcomponents
    pr_A : process A.Impl;
    pr_B : process B.Impl;
  connections
   port group pr_A.Produce -> pr_B.Consume;
end Simple.Impl;

