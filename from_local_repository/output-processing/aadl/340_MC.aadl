package MC
public

	with UAS_Buses;
	with CASE_Model_Transformations;
	with SW;
	with CASE_Properties;
	with CASE_Consolidated_Properties;

	-- The radio communication hardware
	device Radio
		features
			MCA: requires bus access MC_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_out: out event data port;
		flows
			f1: flow path recv_data_in -> recv_data_out;
			f2: flow path send_data_in -> send_data_out;
		annex Verdict{**
			CyberRel "recv_data_out_C" = recv_data_in:C => recv_data_out:C;
			CyberRel "recv_data_out_I" = recv_data_in:I => recv_data_out:I;
			CyberRel "recv_data_out_A" = recv_data_in:A => recv_data_out:A;
		
			CyberRel "send_data_out_C" = send_data_in:C => send_data_out:C;
			CyberRel "send_data_out_I" = send_data_in:I => send_data_out:I;
			CyberRel "send_data_out_A" = send_data_in:A => send_data_out:A;
		
		**};			
	end Radio;

	device implementation Radio.Impl
	end Radio.Impl;

	-- The serial communication hardware
	device UART
		features
			MCA: requires bus access MC_Bus.Impl;
			UART: requires bus access UAS_Buses::Serial_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_out: out event data port;
		flows
			f1: flow path recv_data_in -> recv_data_out;
			f2: flow path send_data_in -> send_data_out;
		annex Verdict{**
			CyberRel "recv_data_out_C" = recv_data_in:C => recv_data_out:C;
			CyberRel "recv_data_out_I" = recv_data_in:I => recv_data_out:I;
			CyberRel "recv_data_out_A" = recv_data_in:A => recv_data_out:A;
		
			CyberRel "send_data_out_C" = send_data_in:C => send_data_out:C;
			CyberRel "send_data_out_I" = send_data_in:I => send_data_out:I;
			CyberRel "send_data_out_A" = send_data_in:A => send_data_out:A;
		
		**};			
	end UART;

	device implementation UART.Impl
	end UART.Impl;

	-- The Mission Computer processor
	processor MC_Proc
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Proc;

	processor implementation MC_Proc.Impl
		properties
			CASE_Properties::OS => "Linux";
	end MC_Proc.Impl;

	-- The Mission Computer RAM
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Mem;

	memory implementation MC_Mem.Impl
	end MC_Mem.Impl;

	-- The Mission Computer on-board bus
	bus MC_Bus
	end MC_Bus;

	bus implementation MC_Bus.Impl
	end MC_Bus.Impl;

	-- The MissionComputer on-board the UAV
	system MissionComputer

		features
			radio_recv: in event data port;
			radio_send: out event data port;
			fc_uart_recv: in event data port;
			fc_uart_send: out event data port;
			FC_UART: requires bus access UAS_Buses::Serial_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;

			sw_uxas_out: out event data port;

	end MissionComputer;

	system implementation MissionComputer.Impl

		subcomponents
			SW: process SW::SW.Impl; --## VERDICT properties are specified for subcomponents of SW
			
			--## Renamed so that all subcomponents have unique names globally
			RADIO_HW_MC: device Radio.Impl
			{
				-- VERDICT Component Properties
				CASE_Consolidated_Properties::canReceiveSWUpdate => true;
				CASE_Consolidated_Properties::componentType => Hardware;
				CASE_Consolidated_Properties::hasSensitiveInfo => false;
				CASE_Consolidated_Properties::insideTrustedBoundary => true; --AM made it to be inside trusted boundary
				CASE_Consolidated_Properties::pedigree => COTS; 
			};			
			FC_UART_HW: device UART.Impl
			{
				-- VERDICT Component Properties
				CASE_Consolidated_Properties::canReceiveSWUpdate => true;
				CASE_Consolidated_Properties::componentType => Hardware;
				CASE_Consolidated_Properties::hasSensitiveInfo => false;
				CASE_Consolidated_Properties::insideTrustedBoundary => true; --AM made it to be inside trusted boundary
				CASE_Consolidated_Properties::pedigree => COTS; 
			};			
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
		connections

			-- MissionComputer
			c01: port radio_recv -> RADIO_HW_MC.recv_data_in;
			c02: port fc_uart_recv -> FC_UART_HW.recv_data_in;

			-- RADIO_HW
			c04: port RADIO_HW_MC.recv_data_out -> SW.radio_recv;
			c05: port RADIO_HW_MC.send_data_out -> radio_send;

			-- FC_UART_HW
			c06: port FC_UART_HW.recv_data_out -> SW.uart_recv;
			c07: port FC_UART_HW.send_data_out -> fc_uart_send;

			-- PROC_SW    
			c10: port SW.radio_send -> RADIO_HW_MC.send_data_in;
			c11: port SW.uart_send -> FC_UART_HW.send_data_in;
			
			--## Added connection to route port to outermost system
			c12: port SW.uxas_out -> sw_uxas_out;

			--## Bus access is not supported 
--			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
--			bac2: bus access FC_UART_HW.MCA <-> BUS_HW;
--			bac3: bus access PROC_HW.MCA <-> BUS_HW;
--			bac4: bus access MEM_HW.MCA <-> BUS_HW;
--
--			-- RFA
--			bac5: bus access RADIO_HW.RFA <-> RFA;
--
--			-- UART
--			bac6: bus access FC_UART_HW.UART <-> FC_UART;

		--## Commented out to prevent error 
--		properties
--			Actual_Processor_Binding => (reference (PROC_HW)) applies to SW;
--			Actual_Memory_Binding => (reference (MEM_HW)) applies to SW;
--			Actual_Connection_Binding => (reference (BUS_HW)) applies to c04, c06, c10, c11;

		annex resolute {**

		**};

	end MissionComputer.Impl;
	
end MC;