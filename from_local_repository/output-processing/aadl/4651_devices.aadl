package devices
public
	with dh_devices;

	system devices_layer
		features
			dl_input: in out data port;
			dl_stream: out data port;
			dl_output: out event data port;
	end devices_layer;

	system implementation devices_layer.impl
		subcomponents
			sensor_controller: system dh_devices::sensor_controller.impl;
			alarm_controller: system dh_devices::alarm_controller.impl;
			switch_controller: system dh_devices::switch_controller;
			controller_controller: system dh_devices::controller_controller;
			sensor_dev: device sensor;
			alarm_dev: device alarm;
			controller: device controller;
			switch: device switch;
		connections
			devices_layer_impl_new_connection3: port switch_controller.data_input -> dl_input;
			devices_layer_impl_new_connection5: port sensor_controller.sensor_input -> dl_input;
			devices_layer_impl_new_connection6: port sensor_controller.sensor_stream -> dl_stream;
			devices_layer_impl_new_connection2: port sensor_controller.sensor_event -> dl_output;
			devices_layer_impl_new_connection9: port alarm_controller.alarm_event -> dl_output;
			devices_layer_impl_new_connection11: port sensor_dev.sensor_out -> sensor_controller.sensor_new_feature;
			devices_layer_impl_new_connection12: port alarm_dev.alarm_out -> alarm_controller.alarm_new_feature;
			devices_layer_impl_new_connection13: port controller.controller_out -> controller_controller.controller_new_feature;
			devices_layer_impl_new_connection: port alarm_controller.data_input -> dl_input;
			devices_layer_impl_new_connection14: port switch.switch_out -> switch_controller.switch_new_feature;
			devices_layer_impl_new_connection15: port controller_controller.data_input -> dl_input;
			devices_layer_impl_new_connection4: port switch_controller.switch_event -> dl_output;
			devices_layer_impl_new_connection7: port controller_controller.controller_event -> dl_output;
	end devices_layer.impl;

	device sensor
		features
			sensor_out: out data port;
	end sensor;

	device alarm
		features
			alarm_out: out data port;
	end alarm;

	device controller
		features
			controller_out: out data port;
	end controller;

	device switch
		features
			switch_out: out data port;
	end switch;
end devices;