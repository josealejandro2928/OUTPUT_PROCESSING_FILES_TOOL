-- AADL Document autogenerated by Ivory.Language.AADL

package flight_gen
public
  with SMACCM_SYS;
  with Base_Types;
  with TowerArrays;
  with gcsstream_timing;
  with mavlink_veh_commsec_msg;
  with att_control_dbg_type;
  with alt_control_dbg_type;
  with radio_stat_type;
  with motors_type;
  with controloutput_type;
  with gps_type;
  with sensors_type;
  with control_law_type;
  with mavlink_rc_channels_override_msg;
  with control_law_request_type;
  with mavlink_hil_state_msg;
  with radio_info_type;
  with userinput_type;
  --some reformatting by Backes
  with UserInput;
  with UAV;
  with SMACCM;
  with DATATYPES;

thread gcsTransmitTask_uart5
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart5_1003_chan775_1021";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_1003_chan778_1103";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_1003_chan778_1106");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_1003_chan779_1028";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport36_1096";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport35_1094";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport34_1092";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport33_1090";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport32_1088";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport31_1086";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport30_1084";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport29_1082";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport28_1080";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport27_1078";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport26_1076";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport25_1074";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport24_1072";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport23_1070";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport22_1068";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport21_1066";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport20_1064";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport19_1062";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport18_1060";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport17_1058";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport16_1056";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport15_1054";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport14_1052";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport13_1050";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport12_1048";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport11_1046";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport10_1044";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport9_1042";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport8_1040";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport7_1038";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport6_1036";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport5_1034";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport4_1032";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport3_1030";
    };
    commsecInfo: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport777_1023";
    };
    att_control: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport40_1019";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport39_1017";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport817_1015";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport306_1013";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport297_1011";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport341_1009";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport0_1007";
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1003.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1003_dataport140_1005";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart5_1003.c");
    Priority => 0;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_1003_per50_1110");
end gcsTransmitTask_uart5;


thread encryptTask_uart5
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_995.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart5_995_chan781_997";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_995.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart5_995_chan775_999";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart5_995_chan775_1002");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart5_995.c");
    Priority => 1;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end encryptTask_uart5;


thread gcsReceiveTask_uart5
  features
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_839_chan778_987";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_839_chan2_983";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_839_chan779_981";
    };
    control_law_request: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_839_chan1_843";
    };
    hil_src: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_839_chan780_841";
      SMACCM::Unimplemented => true;
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart5_839_chan776_991";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart5_839_chan776_994");
    };
    param_writer_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport36_911";
    };
    param_writer_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport35_909";
    };
    param_writer_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport34_907";
    };
    param_writer_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport33_905";
    };
    param_writer_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport32_903";
    };
    param_writer_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport31_901";
    };
    param_writer_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport30_899";
    };
    param_writer_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport29_897";
    };
    param_writer_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport28_895";
    };
    param_writer_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport27_893";
    };
    param_writer_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport26_891";
    };
    param_writer_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport25_889";
    };
    param_writer_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport24_887";
    };
    param_writer_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport23_885";
    };
    param_writer_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport22_883";
    };
    param_writer_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport21_881";
    };
    param_writer_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport20_879";
    };
    param_writer_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport19_877";
    };
    param_writer_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport18_875";
    };
    param_writer_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport17_873";
    };
    param_writer_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport16_871";
    };
    param_writer_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport15_869";
    };
    param_writer_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport14_867";
    };
    param_writer_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport13_865";
    };
    param_writer_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport12_863";
    };
    param_writer_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport11_861";
    };
    param_writer_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport10_859";
    };
    param_writer_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport9_857";
    };
    param_writer_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport8_855";
    };
    param_writer_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport7_853";
    };
    param_writer_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport6_851";
    };
    param_writer_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport5_849";
    };
    param_writer_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport4_847";
    };
    param_writer_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_839_dataport3_845";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport36_979";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport35_977";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport34_975";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport33_973";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport32_971";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport31_969";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport30_967";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport29_965";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport28_963";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport27_961";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport26_959";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport25_957";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport24_955";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport23_953";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport22_951";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport21_949";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport20_947";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport19_945";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport18_943";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport17_941";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport16_939";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport15_937";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport14_935";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport13_933";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport12_931";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport11_929";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport10_927";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport9_925";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport8_923";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport7_921";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport6_919";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport5_917";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport4_915";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_839.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_839_dataport3_913";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart5_839.c");
    Priority => 2;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
    SMACCM::Always_Sends_Message => true;
end gcsReceiveTask_uart5;


thread decryptTask_uart5
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_826.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart5_826_chan776_828";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_826.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart5_826_chan782_835";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart5_826_chan782_838");
    };
    commsec_info_src: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_826.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_decryptTask_uart5_826_dataport777_830";
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart5_826.c");
    Priority => 3;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
    SMACCM::Encryption_Algorthim => "AES-128-GCM";
    SMACCM::Always_Sends_Message => true;
    
end decryptTask_uart5;


thread radio_status_uart5
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart5_818.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_radio_status_uart5_818_chan783_822";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_radio_status_uart5_818_chan783_825");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart5_818.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_radio_status_uart5_818_dataport817_820";
    };
  properties
    Source_Text => ("tower_task_usercode_radio_status_uart5_818.c");
    Priority => 4;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end radio_status_uart5;


thread datalink_uart5
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_785_chan768_807";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_785_chan784_795";
      SMACCM::Unimplemented => true;
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_785_chan783_793";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_785_chan782_791";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart5_785_chan781_809";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_785_chan781_812");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_785.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart5_785_chan769_787";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_785_chan769_805");
    };
    
  properties
    Source_Text => ("tower_task_usercode_datalink_uart5_785.c");
    Priority => 5;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM::Always_Sends_Message => true;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_785_per1000_816");
end datalink_uart5;


thread gcsTransmitTask_uart1
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart1_660_chan432_678";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_660_chan435_760";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_660_chan435_763");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_660_chan436_685";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport36_753";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport35_751";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport34_749";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport33_747";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport32_745";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport31_743";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport30_741";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport29_739";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport28_737";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport27_735";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport26_733";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport25_731";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport24_729";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport23_727";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport22_725";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport21_723";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport20_721";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport19_719";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport18_717";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport17_715";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport16_713";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport15_711";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport14_709";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport13_707";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport12_705";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport11_703";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport10_701";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport9_699";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport8_697";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport7_695";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport6_693";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport5_691";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport4_689";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport3_687";
    };
    commsecInfo: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport434_680";
    };
    att_control: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport40_676";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport39_674";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport474_672";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport306_670";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport297_668";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport341_666";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport0_664";
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_660.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_660_dataport140_662";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart1_660.c");
    Priority => 6;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_660_per50_767");
end gcsTransmitTask_uart1;


thread encryptTask_uart1
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_652.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart1_652_chan438_654";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_652.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart1_652_chan432_656";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart1_652_chan432_659");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart1_652.c");
    Priority => 7;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end encryptTask_uart1;


thread gcsReceiveTask_uart1
  features
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_496_chan435_644";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_496_chan2_640";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_496_chan436_638";
    };
    control_law_request: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_496_chan1_500";
    };
    hil_src: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_496_chan437_498";
      SMACCM::Unimplemented => true; 
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart1_496_chan433_648";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart1_496_chan433_651");
    };
    param_writer_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport36_568";
    };
    param_writer_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport35_566";
    };
    param_writer_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport34_564";
    };
    param_writer_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport33_562";
    };
    param_writer_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport32_560";
    };
    param_writer_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport31_558";
    };
    param_writer_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport30_556";
    };
    param_writer_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport29_554";
    };
    param_writer_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport28_552";
    };
    param_writer_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport27_550";
    };
    param_writer_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport26_548";
    };
    param_writer_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport25_546";
    };
    param_writer_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport24_544";
    };
    param_writer_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport23_542";
    };
    param_writer_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport22_540";
    };
    param_writer_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport21_538";
    };
    param_writer_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport20_536";
    };
    param_writer_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport19_534";
    };
    param_writer_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport18_532";
    };
    param_writer_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport17_530";
    };
    param_writer_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport16_528";
    };
    param_writer_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport15_526";
    };
    param_writer_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport14_524";
    };
    param_writer_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport13_522";
    };
    param_writer_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport12_520";
    };
    param_writer_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport11_518";
    };
    param_writer_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport10_516";
    };
    param_writer_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport9_514";
    };
    param_writer_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport8_512";
    };
    param_writer_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport7_510";
    };
    param_writer_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport6_508";
    };
    param_writer_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport5_506";
    };
    param_writer_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport4_504";
    };
    param_writer_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_496_dataport3_502";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport36_636";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport35_634";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport34_632";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport33_630";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport32_628";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport31_626";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport30_624";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport29_622";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport28_620";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport27_618";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport26_616";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport25_614";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport24_612";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport23_610";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport22_608";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport21_606";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport20_604";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport19_602";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport18_600";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport17_598";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport16_596";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport15_594";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport14_592";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport13_590";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport12_588";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport11_586";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport10_584";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport9_582";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport8_580";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport7_578";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport6_576";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport5_574";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport4_572";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_496.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_496_dataport3_570";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart1_496.c");
    Priority => 8;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end gcsReceiveTask_uart1;


thread decryptTask_uart1
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_483.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart1_483_chan433_485";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_483.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart1_483_chan439_492";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart1_483_chan439_495");
    };
    commsec_info_src: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_483.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_decryptTask_uart1_483_dataport434_487";
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart1_483.c");
    Priority => 9;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
    SMACCM::Encryption_Algorthim => "AES-128-GCM";
    
end decryptTask_uart1;


thread radio_status_uart1
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart1_475.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_radio_status_uart1_475_chan440_479";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_radio_status_uart1_475_chan440_482");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart1_475.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_radio_status_uart1_475_dataport474_477";
    };
  properties
    Source_Text => ("tower_task_usercode_radio_status_uart1_475.c");
    Priority => 10;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end radio_status_uart1;


thread datalink_uart1
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_442_chan425_464";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_442_chan441_452";
      SMACCM::Unimplemented => true;
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_442_chan440_450";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_442_chan439_448";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart1_442_chan438_466";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_442_chan438_469");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_442.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart1_442_chan426_444";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_442_chan426_462");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_uart1_442.c");
    Priority => 11;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_442_per1000_473");
end datalink_uart1;


thread px4ioar
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_381_chan395_397";
    };
    uart_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_381_chan374_383";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_381_chan395_399";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_381_chan395_newstate_loop_424", "eventhandler_px4ioar_381_chan395_newstate_bootCheckComplete_420", "eventhandler_px4ioar_381_chan395_newstate_initMulti_417", "eventhandler_px4ioar_381_chan395_newstate_init4_416", "eventhandler_px4ioar_381_chan395_newstate_init3_413", "eventhandler_px4ioar_381_chan395_newstate_init2_410", "eventhandler_px4ioar_381_chan395_newstate_init1_407", "eventhandler_px4ioar_381_chan395_newstate_bootBegin_404");
    };
    motor_istream: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_381_chan37_385";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_381_chan37_loop_423");
    };
    
    --added by Backes
    motor1 : out data port DATATYPES::Servo_Commands;
    motor2 : out data port DATATYPES::Servo_Commands;
    motor3 : out data port DATATYPES::Servo_Commands;
    motor4 : out data port DATATYPES::Servo_Commands;
    
  properties
    Source_Text => ("tower_task_usercode_px4ioar_381.c");
    Priority => 12;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_381_per1_loop_422", "eventhandler_px4ioar_381_per1_bootCheckComplete_419", "eventhandler_px4ioar_381_per1_init4_415", "eventhandler_px4ioar_381_per1_init3_412", "eventhandler_px4ioar_381_per1_init2_409", "eventhandler_px4ioar_381_per1_init1_406", "eventhandler_px4ioar_381_per1_bootBegin_403");
end px4ioar;


thread sensorsCaptureTask
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_350.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_sensorsCaptureTask_350_chan363_365";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_350.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_350_chan363_367";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_350_chan363_newstate_captureloop_373", "eventhandler_sensorsCaptureTask_350_chan363_newstate_init_370");
    };
    position: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_350.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_350_chan322_355";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_350_chan322_358");
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_350.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_sensorsCaptureTask_350_dataport0_352";
    };
    
    --added by backes
    sensors_in: feature group UAV::sensors;
    
  properties
    Source_Text => ("tower_task_usercode_sensorsCaptureTask_350.c");
    Priority => 13;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_350_per1_captureloop_372");
end sensorsCaptureTask;


thread position_state
  features
    proxyEvent: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_position_state_342.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_position_state_342_chan322_346";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_position_state_342_chan322_349");
    };
    proxyData: requires data access gps_type::position.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_position_state_342.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_position_state_342_dataport341_344";
    };
  properties
    Source_Text => ("tower_task_usercode_position_state_342.c");
    Priority => 14;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end position_state;


thread ubloxGPS
  features
    position: out event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_323.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ubloxGPS_323_chan322_329";
    };
    istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_323.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_ubloxGPS_323_chan316_325";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_ubloxGPS_323_chan316_340");
    };
  properties
    Source_Text => ("tower_task_usercode_ubloxGPS_323.c");
    Priority => 15;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end ubloxGPS;


thread motors_state
  features
    proxyEvent: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motors_state_307.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motors_state_307_chan37_311";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motors_state_307_chan37_314");
    };
    proxyData: requires data access motors_type::motors.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motors_state_307.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_motors_state_307_dataport306_309";
    };
  properties
    Source_Text => ("tower_task_usercode_motors_state_307.c");
    Priority => 16;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end motors_state;


thread control_state
  features
    proxyEvent: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_298.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_control_state_298_chan38_302";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_state_298_chan38_305");
    };
    proxyData: requires data access controloutput_type::controloutput.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_298.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_state_298_dataport297_300";
    };
  properties
    Source_Text => ("tower_task_usercode_control_state_298.c");
    Priority => 17;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end control_state;


thread motmix
  features
    motors: out event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_287.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_motmix_287_chan37_291";
    };
    control: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_287.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motmix_287_chan38_293";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motmix_287_chan38_296");
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_287.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_287_dataport140_289";
    };
  properties
    Source_Text => ("tower_task_usercode_motmix_287.c");
    Priority => 18;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end motmix;


thread control
  features
    control: out event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_control_157_chan38_165";
    };
    att_control_dbg: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_157_dataport40_261";
    };
    alt_control_dbg: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_157_dataport39_257";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport36_233";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport35_231";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport34_229";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport33_227";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport32_225";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport31_223";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport30_221";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport29_219";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport28_217";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport27_215";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport26_213";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport25_211";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport24_209";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport23_207";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport22_205";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport21_203";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport20_201";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport19_199";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport18_197";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport17_195";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport16_193";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport15_191";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport14_189";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport13_187";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport12_185";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport11_183";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport10_181";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport9_179";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport8_177";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport7_175";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport6_173";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport5_171";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport4_169";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport3_167";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport0_163";
    };
    userinput: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport131_161";
    };
    control_law: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport140_159";
    };
  properties
    Source_Text => ("tower_task_usercode_control_157.c");
    Priority => 19;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_157_per5_286");
end control;


thread blink
  features
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_149.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_149_dataport140_151";
    };
  properties
    Source_Text => ("tower_task_usercode_blink_149.c");
    Priority => 20;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 125 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_blink_149_per125_156");
end blink;

thread uart5ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart5ISR_770.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart5ISR_770_chan769_774";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart5ISR_770.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart5ISR_770_chan768_772";
    };
    
    --added by Backes
    mavlink: in out data port DATATYPES::EncryptMAVLink;
    
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart5ISR_770.c");
    Priority => 27;
    SMACCM::Always_Sends_Message => true;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "UART5_IRQn";
    SMACCM_SYS::ISR_Handler => "UART5_IRQHandler";
end uart5ISR;


thread uart1ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart1ISR_427.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart1ISR_427_chan426_431";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart1ISR_427.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart1ISR_427_chan425_429";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart1ISR_427.c");
    Priority => 28;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART1_IRQn";
    SMACCM_SYS::ISR_Handler => "USART1_IRQHandler";
end uart1ISR;


thread uart2ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart2ISR_376.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart2ISR_376_chan375_380";
      SMACCM::Unimplemented => true;
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart2ISR_376.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart2ISR_376_chan374_378";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart2ISR_376.c");
    Priority => 29;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART2_IRQn";
    SMACCM_SYS::ISR_Handler => "USART2_IRQHandler";
end uart2ISR;


thread uart6ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart6ISR_317.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart6ISR_317_chan316_321";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart6ISR_317.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart6ISR_317_chan315_319";
      SMACCM::Unimplemented => true;
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart6ISR_317.c");
    Priority => 30;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART6_IRQn";
    SMACCM_SYS::ISR_Handler => "USART6_IRQHandler";
end uart6ISR;


system Software
    features
      motors_and_radios: feature group UAV::motors_and_radios;
      sensors: feature group UAV::sensors;
end Software;
  
  system implementation Software.Impl 
    subcomponents
      ML: process flight_gen_process.Impl;
             
    connections
      conn0: feature group motors_and_radios <-> ML.motors_and_radios;
      conn1: feature group sensors <-> ML.sensors;
      
    annex agree {**
      assert ML.system_time >= 0;
  	  assert true -> ML.system_time > pre(ML.system_time);
    **};
      
  end Software.Impl;

process flight_gen_process
	features
      motors_and_radios: feature group UAV::motors_and_radios;
      sensors: feature group UAV::sensors;
      system_time : in data port Base_Types::Integer;
      
    annex agree {**
    	assume "positive time" :
  			system_time >= 0;
  	
  		assume "the time value is always increasing" :
  			true -> system_time > pre(system_time);
    **};
      
end flight_gen_process;


process implementation flight_gen_process.impl
  subcomponents
    dataport817 : data radio_stat_type::radio_stat.impl;
    dataport777 : data mavlink_veh_commsec_msg::veh_commsec_msg.impl;
    dataport474 : data radio_stat_type::radio_stat.impl;
    dataport434 : data mavlink_veh_commsec_msg::veh_commsec_msg.impl;
    dataport341 : data gps_type::position.impl;
    dataport306 : data motors_type::motors.impl;
    dataport297 : data controloutput_type::controloutput.impl;
    dataport140 : data control_law_type::control_law.impl;
    dataport131 : data userinput_type::userinput_result.impl;
    dataport40 : data att_control_dbg_type::att_control_dbg.impl;
    dataport39 : data alt_control_dbg_type::alt_control_dbg.impl;
    dataport36 : data Base_Types::Float;
    dataport35 : data Base_Types::Float;
    dataport34 : data Base_Types::Float;
    dataport33 : data Base_Types::Float;
    dataport32 : data Base_Types::Float;
    dataport31 : data Base_Types::Float;
    dataport30 : data Base_Types::Float;
    dataport29 : data Base_Types::Float;
    dataport28 : data Base_Types::Float;
    dataport27 : data Base_Types::Float;
    dataport26 : data Base_Types::Float;
    dataport25 : data Base_Types::Float;
    dataport24 : data Base_Types::Float;
    dataport23 : data Base_Types::Float;
    dataport22 : data Base_Types::Float;
    dataport21 : data Base_Types::Float;
    dataport20 : data Base_Types::Float;
    dataport19 : data Base_Types::Float;
    dataport18 : data Base_Types::Float;
    dataport17 : data Base_Types::Float;
    dataport16 : data Base_Types::Float;
    dataport15 : data Base_Types::Float;
    dataport14 : data Base_Types::Float;
    dataport13 : data Base_Types::Float;
    dataport12 : data Base_Types::Float;
    dataport11 : data Base_Types::Float;
    dataport10 : data Base_Types::Float;
    dataport9 : data Base_Types::Float;
    dataport8 : data Base_Types::Float;
    dataport7 : data Base_Types::Float;
    dataport6 : data Base_Types::Float;
    dataport5 : data Base_Types::Float;
    dataport4 : data Base_Types::Float;
    dataport3 : data Base_Types::Float;
    dataport0 : data sensors_type::sensors_result.impl;
    gcsTransmitTask_uart5_inst : thread gcsTransmitTask_uart5;
    encryptTask_uart5_inst : thread encryptTask_uart5;
    gcsReceiveTask_uart5_inst : thread gcsReceiveTask_uart5;
    decryptTask_uart5_inst : thread decryptTask_uart5;
    radio_status_uart5_inst : thread radio_status_uart5;
    datalink_uart5_inst : thread datalink_uart5;
    gcsTransmitTask_uart1_inst : thread gcsTransmitTask_uart1;
    encryptTask_uart1_inst : thread encryptTask_uart1;
    gcsReceiveTask_uart1_inst : thread gcsReceiveTask_uart1;
    decryptTask_uart1_inst : thread decryptTask_uart1;
    radio_status_uart1_inst : thread radio_status_uart1;
    datalink_uart1_inst : thread datalink_uart1;
    px4ioar_inst : thread px4ioar;
    sensorsCaptureTask_inst : thread sensorsCaptureTask;
    position_state_inst : thread position_state;
    ubloxGPS_inst : thread ubloxGPS;
    motors_state_inst : thread motors_state;
    control_state_inst : thread control_state;
    motmix_inst : thread motmix;
    control_inst : thread control;
    blink_inst : thread blink;
    UserInputThreads_inst : thread group UserInput::UserInputThreads.Impl;
    uart5ISR_inst : thread uart5ISR;
    uart1ISR_inst : thread uart1ISR;
    uart2ISR_inst : thread uart2ISR;
    uart6ISR_inst : thread uart6ISR;
  connections
    conn_1 : port gcsTransmitTask_uart5_inst.gcsTxToEncSrc -> encryptTask_uart5_inst.gcsTxToEnc;
    conn_2 : port encryptTask_uart5_inst.encToHxSrc -> datalink_uart5_inst.framed_istream;
    conn_3 : port gcsReceiveTask_uart5_inst.streamperiods -> gcsTransmitTask_uart5_inst.streamPeriod;
    conn_4 : port gcsReceiveTask_uart5_inst.rc_override_tx -> UserInputThreads_inst.uart5_rcoverride_tx;
    conn_5 : port gcsReceiveTask_uart5_inst.param_req -> gcsTransmitTask_uart5_inst.paramReqs;
    conn_6 : port gcsReceiveTask_uart5_inst.control_law_request -> UserInputThreads_inst.uart5_control_law_request;
    conn_7 : port decryptTask_uart5_inst.decToGcsRxSrc -> gcsReceiveTask_uart5_inst.mavStream;
    conn_8 : port datalink_uart5_inst.link_ostream -> uart5ISR_inst.ostream;
    conn_9 : port datalink_uart5_inst.stat_ostream -> radio_status_uart5_inst.proxyEvent;
    conn_10 : port datalink_uart5_inst.framed_ostream -> decryptTask_uart5_inst.hxToDecRcv;
    conn_11 : port gcsTransmitTask_uart1_inst.gcsTxToEncSrc -> encryptTask_uart1_inst.gcsTxToEnc;
    conn_12 : port encryptTask_uart1_inst.encToHxSrc -> datalink_uart1_inst.framed_istream;
    conn_13 : port gcsReceiveTask_uart1_inst.streamperiods -> gcsTransmitTask_uart1_inst.streamPeriod;
    conn_14 : port gcsReceiveTask_uart1_inst.rc_override_tx -> UserInputThreads_inst.uart1_rcoverride_tx;
    conn_15 : port gcsReceiveTask_uart1_inst.param_req -> gcsTransmitTask_uart1_inst.paramReqs;
    conn_16 : port gcsReceiveTask_uart1_inst.control_law_request -> UserInputThreads_inst.uart1_control_law_request;
    conn_17 : port decryptTask_uart1_inst.decToGcsRxSrc -> gcsReceiveTask_uart1_inst.mavStream;
    conn_18 : port datalink_uart1_inst.link_ostream -> uart1ISR_inst.ostream;
    conn_19 : port datalink_uart1_inst.stat_ostream -> radio_status_uart1_inst.proxyEvent;
    conn_20 : port datalink_uart1_inst.framed_ostream -> decryptTask_uart1_inst.hxToDecRcv;
    conn_21 : port px4ioar_inst.newstateEmitter -> px4ioar_inst.newstateEvent;
    conn_22 : port px4ioar_inst.uart_ostream -> uart2ISR_inst.ostream;
    conn_23 : port sensorsCaptureTask_inst.newstateEmitter -> sensorsCaptureTask_inst.newstateEvent;
    conn_24 : port ubloxGPS_inst.position -> sensorsCaptureTask_inst.position;
    conn_25 : port ubloxGPS_inst.position -> position_state_inst.proxyEvent;
    conn_26 : port motmix_inst.motors -> px4ioar_inst.motor_istream;
    conn_27 : port motmix_inst.motors -> motors_state_inst.proxyEvent;
    conn_28 : port control_inst.control -> control_state_inst.proxyEvent;
    conn_29 : port control_inst.control -> motmix_inst.control;
    conn_37 : port uart5ISR_inst.istream -> datalink_uart5_inst.link_istream;
    conn_38 : port uart1ISR_inst.istream -> datalink_uart1_inst.link_istream;
    conn_39 : port uart6ISR_inst.istream -> ubloxGPS_inst.istream;
    conn_40 : data access dataport36 -> gcsTransmitTask_uart5_inst.param_reader_ALT_UI_DEAD;
    conn_41 : data access dataport35 -> gcsTransmitTask_uart5_inst.param_reader_ALT_UI_SENS;
    conn_42 : data access dataport34 -> gcsTransmitTask_uart5_inst.param_reader_ALT_POS_IMAX;
    conn_43 : data access dataport33 -> gcsTransmitTask_uart5_inst.param_reader_ALT_POS_D;
    conn_44 : data access dataport32 -> gcsTransmitTask_uart5_inst.param_reader_ALT_POS_I;
    conn_45 : data access dataport31 -> gcsTransmitTask_uart5_inst.param_reader_ALT_POS_P;
    conn_46 : data access dataport30 -> gcsTransmitTask_uart5_inst.param_reader_ALT_RATE_IMAX;
    conn_47 : data access dataport29 -> gcsTransmitTask_uart5_inst.param_reader_ALT_RATE_D;
    conn_48 : data access dataport28 -> gcsTransmitTask_uart5_inst.param_reader_ALT_RATE_I;
    conn_49 : data access dataport27 -> gcsTransmitTask_uart5_inst.param_reader_ALT_RATE_P;
    conn_50 : data access dataport26 -> gcsTransmitTask_uart5_inst.param_reader_YAW_STAB_IMAX;
    conn_51 : data access dataport25 -> gcsTransmitTask_uart5_inst.param_reader_YAW_STAB_D;
    conn_52 : data access dataport24 -> gcsTransmitTask_uart5_inst.param_reader_YAW_STAB_I;
    conn_53 : data access dataport23 -> gcsTransmitTask_uart5_inst.param_reader_YAW_STAB_P;
    conn_54 : data access dataport22 -> gcsTransmitTask_uart5_inst.param_reader_YAW_RATE_IMAX;
    conn_55 : data access dataport21 -> gcsTransmitTask_uart5_inst.param_reader_YAW_RATE_D;
    conn_56 : data access dataport20 -> gcsTransmitTask_uart5_inst.param_reader_YAW_RATE_I;
    conn_57 : data access dataport19 -> gcsTransmitTask_uart5_inst.param_reader_YAW_RATE_P;
    conn_58 : data access dataport18 -> gcsTransmitTask_uart5_inst.param_reader_PIT_STAB_IMAX;
    conn_59 : data access dataport17 -> gcsTransmitTask_uart5_inst.param_reader_PIT_STAB_D;
    conn_60 : data access dataport16 -> gcsTransmitTask_uart5_inst.param_reader_PIT_STAB_I;
    conn_61 : data access dataport15 -> gcsTransmitTask_uart5_inst.param_reader_PIT_STAB_P;
    conn_62 : data access dataport14 -> gcsTransmitTask_uart5_inst.param_reader_PIT_RATE_IMAX;
    conn_63 : data access dataport13 -> gcsTransmitTask_uart5_inst.param_reader_PIT_RATE_D;
    conn_64 : data access dataport12 -> gcsTransmitTask_uart5_inst.param_reader_PIT_RATE_I;
    conn_65 : data access dataport11 -> gcsTransmitTask_uart5_inst.param_reader_PIT_RATE_P;
    conn_66 : data access dataport10 -> gcsTransmitTask_uart5_inst.param_reader_RLL_STAB_IMAX;
    conn_67 : data access dataport9 -> gcsTransmitTask_uart5_inst.param_reader_RLL_STAB_D;
    conn_68 : data access dataport8 -> gcsTransmitTask_uart5_inst.param_reader_RLL_STAB_I;
    conn_69 : data access dataport7 -> gcsTransmitTask_uart5_inst.param_reader_RLL_STAB_P;
    conn_70 : data access dataport6 -> gcsTransmitTask_uart5_inst.param_reader_RLL_RATE_IMAX;
    conn_71 : data access dataport5 -> gcsTransmitTask_uart5_inst.param_reader_RLL_RATE_D;
    conn_72 : data access dataport4 -> gcsTransmitTask_uart5_inst.param_reader_RLL_RATE_I;
    conn_73 : data access dataport3 -> gcsTransmitTask_uart5_inst.param_reader_RLL_RATE_P;
    conn_74 : data access dataport777 -> gcsTransmitTask_uart5_inst.commsecInfo;
    conn_75 : data access dataport40 -> gcsTransmitTask_uart5_inst.att_control;
    conn_76 : data access dataport39 -> gcsTransmitTask_uart5_inst.alt_control;
    conn_77 : data access dataport817 -> gcsTransmitTask_uart5_inst.radio;
    conn_78 : data access dataport306 -> gcsTransmitTask_uart5_inst.motors;
    conn_79 : data access dataport297 -> gcsTransmitTask_uart5_inst.control;
    conn_80 : data access dataport341 -> gcsTransmitTask_uart5_inst.position;
    conn_81 : data access dataport0 -> gcsTransmitTask_uart5_inst.sensors;
    conn_82 : data access dataport140 -> gcsTransmitTask_uart5_inst.controllaw;
    conn_83 : data access dataport36 -> gcsReceiveTask_uart5_inst.param_writer_ALT_UI_DEAD;
    conn_84 : data access dataport35 -> gcsReceiveTask_uart5_inst.param_writer_ALT_UI_SENS;
    conn_85 : data access dataport34 -> gcsReceiveTask_uart5_inst.param_writer_ALT_POS_IMAX;
    conn_86 : data access dataport33 -> gcsReceiveTask_uart5_inst.param_writer_ALT_POS_D;
    conn_87 : data access dataport32 -> gcsReceiveTask_uart5_inst.param_writer_ALT_POS_I;
    conn_88 : data access dataport31 -> gcsReceiveTask_uart5_inst.param_writer_ALT_POS_P;
    conn_89 : data access dataport30 -> gcsReceiveTask_uart5_inst.param_writer_ALT_RATE_IMAX;
    conn_90 : data access dataport29 -> gcsReceiveTask_uart5_inst.param_writer_ALT_RATE_D;
    conn_91 : data access dataport28 -> gcsReceiveTask_uart5_inst.param_writer_ALT_RATE_I;
    conn_92 : data access dataport27 -> gcsReceiveTask_uart5_inst.param_writer_ALT_RATE_P;
    conn_93 : data access dataport26 -> gcsReceiveTask_uart5_inst.param_writer_YAW_STAB_IMAX;
    conn_94 : data access dataport25 -> gcsReceiveTask_uart5_inst.param_writer_YAW_STAB_D;
    conn_95 : data access dataport24 -> gcsReceiveTask_uart5_inst.param_writer_YAW_STAB_I;
    conn_96 : data access dataport23 -> gcsReceiveTask_uart5_inst.param_writer_YAW_STAB_P;
    conn_97 : data access dataport22 -> gcsReceiveTask_uart5_inst.param_writer_YAW_RATE_IMAX;
    conn_98 : data access dataport21 -> gcsReceiveTask_uart5_inst.param_writer_YAW_RATE_D;
    conn_99 : data access dataport20 -> gcsReceiveTask_uart5_inst.param_writer_YAW_RATE_I;
    conn_100 : data access dataport19 -> gcsReceiveTask_uart5_inst.param_writer_YAW_RATE_P;
    conn_101 : data access dataport18 -> gcsReceiveTask_uart5_inst.param_writer_PIT_STAB_IMAX;
    conn_102 : data access dataport17 -> gcsReceiveTask_uart5_inst.param_writer_PIT_STAB_D;
    conn_103 : data access dataport16 -> gcsReceiveTask_uart5_inst.param_writer_PIT_STAB_I;
    conn_104 : data access dataport15 -> gcsReceiveTask_uart5_inst.param_writer_PIT_STAB_P;
    conn_105 : data access dataport14 -> gcsReceiveTask_uart5_inst.param_writer_PIT_RATE_IMAX;
    conn_106 : data access dataport13 -> gcsReceiveTask_uart5_inst.param_writer_PIT_RATE_D;
    conn_107 : data access dataport12 -> gcsReceiveTask_uart5_inst.param_writer_PIT_RATE_I;
    conn_108 : data access dataport11 -> gcsReceiveTask_uart5_inst.param_writer_PIT_RATE_P;
    conn_109 : data access dataport10 -> gcsReceiveTask_uart5_inst.param_writer_RLL_STAB_IMAX;
    conn_110 : data access dataport9 -> gcsReceiveTask_uart5_inst.param_writer_RLL_STAB_D;
    conn_111 : data access dataport8 -> gcsReceiveTask_uart5_inst.param_writer_RLL_STAB_I;
    conn_112 : data access dataport7 -> gcsReceiveTask_uart5_inst.param_writer_RLL_STAB_P;
    conn_113 : data access dataport6 -> gcsReceiveTask_uart5_inst.param_writer_RLL_RATE_IMAX;
    conn_114 : data access dataport5 -> gcsReceiveTask_uart5_inst.param_writer_RLL_RATE_D;
    conn_115 : data access dataport4 -> gcsReceiveTask_uart5_inst.param_writer_RLL_RATE_I;
    conn_116 : data access dataport3 -> gcsReceiveTask_uart5_inst.param_writer_RLL_RATE_P;
    conn_117 : data access dataport36 -> gcsReceiveTask_uart5_inst.param_reader_ALT_UI_DEAD;
    conn_118 : data access dataport35 -> gcsReceiveTask_uart5_inst.param_reader_ALT_UI_SENS;
    conn_119 : data access dataport34 -> gcsReceiveTask_uart5_inst.param_reader_ALT_POS_IMAX;
    conn_120 : data access dataport33 -> gcsReceiveTask_uart5_inst.param_reader_ALT_POS_D;
    conn_121 : data access dataport32 -> gcsReceiveTask_uart5_inst.param_reader_ALT_POS_I;
    conn_122 : data access dataport31 -> gcsReceiveTask_uart5_inst.param_reader_ALT_POS_P;
    conn_123 : data access dataport30 -> gcsReceiveTask_uart5_inst.param_reader_ALT_RATE_IMAX;
    conn_124 : data access dataport29 -> gcsReceiveTask_uart5_inst.param_reader_ALT_RATE_D;
    conn_125 : data access dataport28 -> gcsReceiveTask_uart5_inst.param_reader_ALT_RATE_I;
    conn_126 : data access dataport27 -> gcsReceiveTask_uart5_inst.param_reader_ALT_RATE_P;
    conn_127 : data access dataport26 -> gcsReceiveTask_uart5_inst.param_reader_YAW_STAB_IMAX;
    conn_128 : data access dataport25 -> gcsReceiveTask_uart5_inst.param_reader_YAW_STAB_D;
    conn_129 : data access dataport24 -> gcsReceiveTask_uart5_inst.param_reader_YAW_STAB_I;
    conn_130 : data access dataport23 -> gcsReceiveTask_uart5_inst.param_reader_YAW_STAB_P;
    conn_131 : data access dataport22 -> gcsReceiveTask_uart5_inst.param_reader_YAW_RATE_IMAX;
    conn_132 : data access dataport21 -> gcsReceiveTask_uart5_inst.param_reader_YAW_RATE_D;
    conn_133 : data access dataport20 -> gcsReceiveTask_uart5_inst.param_reader_YAW_RATE_I;
    conn_134 : data access dataport19 -> gcsReceiveTask_uart5_inst.param_reader_YAW_RATE_P;
    conn_135 : data access dataport18 -> gcsReceiveTask_uart5_inst.param_reader_PIT_STAB_IMAX;
    conn_136 : data access dataport17 -> gcsReceiveTask_uart5_inst.param_reader_PIT_STAB_D;
    conn_137 : data access dataport16 -> gcsReceiveTask_uart5_inst.param_reader_PIT_STAB_I;
    conn_138 : data access dataport15 -> gcsReceiveTask_uart5_inst.param_reader_PIT_STAB_P;
    conn_139 : data access dataport14 -> gcsReceiveTask_uart5_inst.param_reader_PIT_RATE_IMAX;
    conn_140 : data access dataport13 -> gcsReceiveTask_uart5_inst.param_reader_PIT_RATE_D;
    conn_141 : data access dataport12 -> gcsReceiveTask_uart5_inst.param_reader_PIT_RATE_I;
    conn_142 : data access dataport11 -> gcsReceiveTask_uart5_inst.param_reader_PIT_RATE_P;
    conn_143 : data access dataport10 -> gcsReceiveTask_uart5_inst.param_reader_RLL_STAB_IMAX;
    conn_144 : data access dataport9 -> gcsReceiveTask_uart5_inst.param_reader_RLL_STAB_D;
    conn_145 : data access dataport8 -> gcsReceiveTask_uart5_inst.param_reader_RLL_STAB_I;
    conn_146 : data access dataport7 -> gcsReceiveTask_uart5_inst.param_reader_RLL_STAB_P;
    conn_147 : data access dataport6 -> gcsReceiveTask_uart5_inst.param_reader_RLL_RATE_IMAX;
    conn_148 : data access dataport5 -> gcsReceiveTask_uart5_inst.param_reader_RLL_RATE_D;
    conn_149 : data access dataport4 -> gcsReceiveTask_uart5_inst.param_reader_RLL_RATE_I;
    conn_150 : data access dataport3 -> gcsReceiveTask_uart5_inst.param_reader_RLL_RATE_P;
    conn_151 : data access dataport777 -> decryptTask_uart5_inst.commsec_info_src;
    conn_152 : data access dataport817 -> radio_status_uart5_inst.proxyData;
    conn_153 : data access dataport36 -> gcsTransmitTask_uart1_inst.param_reader_ALT_UI_DEAD;
    conn_154 : data access dataport35 -> gcsTransmitTask_uart1_inst.param_reader_ALT_UI_SENS;
    conn_155 : data access dataport34 -> gcsTransmitTask_uart1_inst.param_reader_ALT_POS_IMAX;
    conn_156 : data access dataport33 -> gcsTransmitTask_uart1_inst.param_reader_ALT_POS_D;
    conn_157 : data access dataport32 -> gcsTransmitTask_uart1_inst.param_reader_ALT_POS_I;
    conn_158 : data access dataport31 -> gcsTransmitTask_uart1_inst.param_reader_ALT_POS_P;
    conn_159 : data access dataport30 -> gcsTransmitTask_uart1_inst.param_reader_ALT_RATE_IMAX;
    conn_160 : data access dataport29 -> gcsTransmitTask_uart1_inst.param_reader_ALT_RATE_D;
    conn_161 : data access dataport28 -> gcsTransmitTask_uart1_inst.param_reader_ALT_RATE_I;
    conn_162 : data access dataport27 -> gcsTransmitTask_uart1_inst.param_reader_ALT_RATE_P;
    conn_163 : data access dataport26 -> gcsTransmitTask_uart1_inst.param_reader_YAW_STAB_IMAX;
    conn_164 : data access dataport25 -> gcsTransmitTask_uart1_inst.param_reader_YAW_STAB_D;
    conn_165 : data access dataport24 -> gcsTransmitTask_uart1_inst.param_reader_YAW_STAB_I;
    conn_166 : data access dataport23 -> gcsTransmitTask_uart1_inst.param_reader_YAW_STAB_P;
    conn_167 : data access dataport22 -> gcsTransmitTask_uart1_inst.param_reader_YAW_RATE_IMAX;
    conn_168 : data access dataport21 -> gcsTransmitTask_uart1_inst.param_reader_YAW_RATE_D;
    conn_169 : data access dataport20 -> gcsTransmitTask_uart1_inst.param_reader_YAW_RATE_I;
    conn_170 : data access dataport19 -> gcsTransmitTask_uart1_inst.param_reader_YAW_RATE_P;
    conn_171 : data access dataport18 -> gcsTransmitTask_uart1_inst.param_reader_PIT_STAB_IMAX;
    conn_172 : data access dataport17 -> gcsTransmitTask_uart1_inst.param_reader_PIT_STAB_D;
    conn_173 : data access dataport16 -> gcsTransmitTask_uart1_inst.param_reader_PIT_STAB_I;
    conn_174 : data access dataport15 -> gcsTransmitTask_uart1_inst.param_reader_PIT_STAB_P;
    conn_175 : data access dataport14 -> gcsTransmitTask_uart1_inst.param_reader_PIT_RATE_IMAX;
    conn_176 : data access dataport13 -> gcsTransmitTask_uart1_inst.param_reader_PIT_RATE_D;
    conn_177 : data access dataport12 -> gcsTransmitTask_uart1_inst.param_reader_PIT_RATE_I;
    conn_178 : data access dataport11 -> gcsTransmitTask_uart1_inst.param_reader_PIT_RATE_P;
    conn_179 : data access dataport10 -> gcsTransmitTask_uart1_inst.param_reader_RLL_STAB_IMAX;
    conn_180 : data access dataport9 -> gcsTransmitTask_uart1_inst.param_reader_RLL_STAB_D;
    conn_181 : data access dataport8 -> gcsTransmitTask_uart1_inst.param_reader_RLL_STAB_I;
    conn_182 : data access dataport7 -> gcsTransmitTask_uart1_inst.param_reader_RLL_STAB_P;
    conn_183 : data access dataport6 -> gcsTransmitTask_uart1_inst.param_reader_RLL_RATE_IMAX;
    conn_184 : data access dataport5 -> gcsTransmitTask_uart1_inst.param_reader_RLL_RATE_D;
    conn_185 : data access dataport4 -> gcsTransmitTask_uart1_inst.param_reader_RLL_RATE_I;
    conn_186 : data access dataport3 -> gcsTransmitTask_uart1_inst.param_reader_RLL_RATE_P;
    conn_187 : data access dataport434 -> gcsTransmitTask_uart1_inst.commsecInfo;
    conn_188 : data access dataport40 -> gcsTransmitTask_uart1_inst.att_control;
    conn_189 : data access dataport39 -> gcsTransmitTask_uart1_inst.alt_control;
    conn_190 : data access dataport474 -> gcsTransmitTask_uart1_inst.radio;
    conn_191 : data access dataport306 -> gcsTransmitTask_uart1_inst.motors;
    conn_192 : data access dataport297 -> gcsTransmitTask_uart1_inst.control;
    conn_193 : data access dataport341 -> gcsTransmitTask_uart1_inst.position;
    conn_194 : data access dataport0 -> gcsTransmitTask_uart1_inst.sensors;
    conn_195 : data access dataport140 -> gcsTransmitTask_uart1_inst.controllaw;
    conn_196 : data access dataport36 -> gcsReceiveTask_uart1_inst.param_writer_ALT_UI_DEAD;
    conn_197 : data access dataport35 -> gcsReceiveTask_uart1_inst.param_writer_ALT_UI_SENS;
    conn_198 : data access dataport34 -> gcsReceiveTask_uart1_inst.param_writer_ALT_POS_IMAX;
    conn_199 : data access dataport33 -> gcsReceiveTask_uart1_inst.param_writer_ALT_POS_D;
    conn_200 : data access dataport32 -> gcsReceiveTask_uart1_inst.param_writer_ALT_POS_I;
    conn_201 : data access dataport31 -> gcsReceiveTask_uart1_inst.param_writer_ALT_POS_P;
    conn_202 : data access dataport30 -> gcsReceiveTask_uart1_inst.param_writer_ALT_RATE_IMAX;
    conn_203 : data access dataport29 -> gcsReceiveTask_uart1_inst.param_writer_ALT_RATE_D;
    conn_204 : data access dataport28 -> gcsReceiveTask_uart1_inst.param_writer_ALT_RATE_I;
    conn_205 : data access dataport27 -> gcsReceiveTask_uart1_inst.param_writer_ALT_RATE_P;
    conn_206 : data access dataport26 -> gcsReceiveTask_uart1_inst.param_writer_YAW_STAB_IMAX;
    conn_207 : data access dataport25 -> gcsReceiveTask_uart1_inst.param_writer_YAW_STAB_D;
    conn_208 : data access dataport24 -> gcsReceiveTask_uart1_inst.param_writer_YAW_STAB_I;
    conn_209 : data access dataport23 -> gcsReceiveTask_uart1_inst.param_writer_YAW_STAB_P;
    conn_210 : data access dataport22 -> gcsReceiveTask_uart1_inst.param_writer_YAW_RATE_IMAX;
    conn_211 : data access dataport21 -> gcsReceiveTask_uart1_inst.param_writer_YAW_RATE_D;
    conn_212 : data access dataport20 -> gcsReceiveTask_uart1_inst.param_writer_YAW_RATE_I;
    conn_213 : data access dataport19 -> gcsReceiveTask_uart1_inst.param_writer_YAW_RATE_P;
    conn_214 : data access dataport18 -> gcsReceiveTask_uart1_inst.param_writer_PIT_STAB_IMAX;
    conn_215 : data access dataport17 -> gcsReceiveTask_uart1_inst.param_writer_PIT_STAB_D;
    conn_216 : data access dataport16 -> gcsReceiveTask_uart1_inst.param_writer_PIT_STAB_I;
    conn_217 : data access dataport15 -> gcsReceiveTask_uart1_inst.param_writer_PIT_STAB_P;
    conn_218 : data access dataport14 -> gcsReceiveTask_uart1_inst.param_writer_PIT_RATE_IMAX;
    conn_219 : data access dataport13 -> gcsReceiveTask_uart1_inst.param_writer_PIT_RATE_D;
    conn_220 : data access dataport12 -> gcsReceiveTask_uart1_inst.param_writer_PIT_RATE_I;
    conn_221 : data access dataport11 -> gcsReceiveTask_uart1_inst.param_writer_PIT_RATE_P;
    conn_222 : data access dataport10 -> gcsReceiveTask_uart1_inst.param_writer_RLL_STAB_IMAX;
    conn_223 : data access dataport9 -> gcsReceiveTask_uart1_inst.param_writer_RLL_STAB_D;
    conn_224 : data access dataport8 -> gcsReceiveTask_uart1_inst.param_writer_RLL_STAB_I;
    conn_225 : data access dataport7 -> gcsReceiveTask_uart1_inst.param_writer_RLL_STAB_P;
    conn_226 : data access dataport6 -> gcsReceiveTask_uart1_inst.param_writer_RLL_RATE_IMAX;
    conn_227 : data access dataport5 -> gcsReceiveTask_uart1_inst.param_writer_RLL_RATE_D;
    conn_228 : data access dataport4 -> gcsReceiveTask_uart1_inst.param_writer_RLL_RATE_I;
    conn_229 : data access dataport3 -> gcsReceiveTask_uart1_inst.param_writer_RLL_RATE_P;
    conn_230 : data access dataport36 -> gcsReceiveTask_uart1_inst.param_reader_ALT_UI_DEAD;
    conn_231 : data access dataport35 -> gcsReceiveTask_uart1_inst.param_reader_ALT_UI_SENS;
    conn_232 : data access dataport34 -> gcsReceiveTask_uart1_inst.param_reader_ALT_POS_IMAX;
    conn_233 : data access dataport33 -> gcsReceiveTask_uart1_inst.param_reader_ALT_POS_D;
    conn_234 : data access dataport32 -> gcsReceiveTask_uart1_inst.param_reader_ALT_POS_I;
    conn_235 : data access dataport31 -> gcsReceiveTask_uart1_inst.param_reader_ALT_POS_P;
    conn_236 : data access dataport30 -> gcsReceiveTask_uart1_inst.param_reader_ALT_RATE_IMAX;
    conn_237 : data access dataport29 -> gcsReceiveTask_uart1_inst.param_reader_ALT_RATE_D;
    conn_238 : data access dataport28 -> gcsReceiveTask_uart1_inst.param_reader_ALT_RATE_I;
    conn_239 : data access dataport27 -> gcsReceiveTask_uart1_inst.param_reader_ALT_RATE_P;
    conn_240 : data access dataport26 -> gcsReceiveTask_uart1_inst.param_reader_YAW_STAB_IMAX;
    conn_241 : data access dataport25 -> gcsReceiveTask_uart1_inst.param_reader_YAW_STAB_D;
    conn_242 : data access dataport24 -> gcsReceiveTask_uart1_inst.param_reader_YAW_STAB_I;
    conn_243 : data access dataport23 -> gcsReceiveTask_uart1_inst.param_reader_YAW_STAB_P;
    conn_244 : data access dataport22 -> gcsReceiveTask_uart1_inst.param_reader_YAW_RATE_IMAX;
    conn_245 : data access dataport21 -> gcsReceiveTask_uart1_inst.param_reader_YAW_RATE_D;
    conn_246 : data access dataport20 -> gcsReceiveTask_uart1_inst.param_reader_YAW_RATE_I;
    conn_247 : data access dataport19 -> gcsReceiveTask_uart1_inst.param_reader_YAW_RATE_P;
    conn_248 : data access dataport18 -> gcsReceiveTask_uart1_inst.param_reader_PIT_STAB_IMAX;
    conn_249 : data access dataport17 -> gcsReceiveTask_uart1_inst.param_reader_PIT_STAB_D;
    conn_250 : data access dataport16 -> gcsReceiveTask_uart1_inst.param_reader_PIT_STAB_I;
    conn_251 : data access dataport15 -> gcsReceiveTask_uart1_inst.param_reader_PIT_STAB_P;
    conn_252 : data access dataport14 -> gcsReceiveTask_uart1_inst.param_reader_PIT_RATE_IMAX;
    conn_253 : data access dataport13 -> gcsReceiveTask_uart1_inst.param_reader_PIT_RATE_D;
    conn_254 : data access dataport12 -> gcsReceiveTask_uart1_inst.param_reader_PIT_RATE_I;
    conn_255 : data access dataport11 -> gcsReceiveTask_uart1_inst.param_reader_PIT_RATE_P;
    conn_256 : data access dataport10 -> gcsReceiveTask_uart1_inst.param_reader_RLL_STAB_IMAX;
    conn_257 : data access dataport9 -> gcsReceiveTask_uart1_inst.param_reader_RLL_STAB_D;
    conn_258 : data access dataport8 -> gcsReceiveTask_uart1_inst.param_reader_RLL_STAB_I;
    conn_259 : data access dataport7 -> gcsReceiveTask_uart1_inst.param_reader_RLL_STAB_P;
    conn_260 : data access dataport6 -> gcsReceiveTask_uart1_inst.param_reader_RLL_RATE_IMAX;
    conn_261 : data access dataport5 -> gcsReceiveTask_uart1_inst.param_reader_RLL_RATE_D;
    conn_262 : data access dataport4 -> gcsReceiveTask_uart1_inst.param_reader_RLL_RATE_I;
    conn_263 : data access dataport3 -> gcsReceiveTask_uart1_inst.param_reader_RLL_RATE_P;
    conn_264 : data access dataport434 -> decryptTask_uart1_inst.commsec_info_src;
    conn_265 : data access dataport474 -> radio_status_uart1_inst.proxyData;
    conn_266 : data access dataport0 -> sensorsCaptureTask_inst.sensors;
    conn_267 : data access dataport341 -> position_state_inst.proxyData;
    conn_268 : data access dataport306 -> motors_state_inst.proxyData;
    conn_269 : data access dataport297 -> control_state_inst.proxyData;
    conn_270 : data access dataport140 -> motmix_inst.controllaw;
    conn_271 : data access dataport40 -> control_inst.att_control_dbg;
    conn_272 : data access dataport39 -> control_inst.alt_control_dbg;
    conn_273 : data access dataport36 -> control_inst.param_reader_ALT_UI_DEAD;
    conn_274 : data access dataport35 -> control_inst.param_reader_ALT_UI_SENS;
    conn_275 : data access dataport34 -> control_inst.param_reader_ALT_POS_IMAX;
    conn_276 : data access dataport33 -> control_inst.param_reader_ALT_POS_D;
    conn_277 : data access dataport32 -> control_inst.param_reader_ALT_POS_I;
    conn_278 : data access dataport31 -> control_inst.param_reader_ALT_POS_P;
    conn_279 : data access dataport30 -> control_inst.param_reader_ALT_RATE_IMAX;
    conn_280 : data access dataport29 -> control_inst.param_reader_ALT_RATE_D;
    conn_281 : data access dataport28 -> control_inst.param_reader_ALT_RATE_I;
    conn_282 : data access dataport27 -> control_inst.param_reader_ALT_RATE_P;
    conn_283 : data access dataport26 -> control_inst.param_reader_YAW_STAB_IMAX;
    conn_284 : data access dataport25 -> control_inst.param_reader_YAW_STAB_D;
    conn_285 : data access dataport24 -> control_inst.param_reader_YAW_STAB_I;
    conn_286 : data access dataport23 -> control_inst.param_reader_YAW_STAB_P;
    conn_287 : data access dataport22 -> control_inst.param_reader_YAW_RATE_IMAX;
    conn_288 : data access dataport21 -> control_inst.param_reader_YAW_RATE_D;
    conn_289 : data access dataport20 -> control_inst.param_reader_YAW_RATE_I;
    conn_290 : data access dataport19 -> control_inst.param_reader_YAW_RATE_P;
    conn_291 : data access dataport18 -> control_inst.param_reader_PIT_STAB_IMAX;
    conn_292 : data access dataport17 -> control_inst.param_reader_PIT_STAB_D;
    conn_293 : data access dataport16 -> control_inst.param_reader_PIT_STAB_I;
    conn_294 : data access dataport15 -> control_inst.param_reader_PIT_STAB_P;
    conn_295 : data access dataport14 -> control_inst.param_reader_PIT_RATE_IMAX;
    conn_296 : data access dataport13 -> control_inst.param_reader_PIT_RATE_D;
    conn_297 : data access dataport12 -> control_inst.param_reader_PIT_RATE_I;
    conn_298 : data access dataport11 -> control_inst.param_reader_PIT_RATE_P;
    conn_299 : data access dataport10 -> control_inst.param_reader_RLL_STAB_IMAX;
    conn_300 : data access dataport9 -> control_inst.param_reader_RLL_STAB_D;
    conn_301 : data access dataport8 -> control_inst.param_reader_RLL_STAB_I;
    conn_302 : data access dataport7 -> control_inst.param_reader_RLL_STAB_P;
    conn_303 : data access dataport6 -> control_inst.param_reader_RLL_RATE_IMAX;
    conn_304 : data access dataport5 -> control_inst.param_reader_RLL_RATE_D;
    conn_305 : data access dataport4 -> control_inst.param_reader_RLL_RATE_I;
    conn_306 : data access dataport3 -> control_inst.param_reader_RLL_RATE_P;
    conn_307 : data access dataport0 -> control_inst.sensors;
    conn_308 : data access dataport131 -> control_inst.userinput;
    conn_309 : data access dataport140 -> control_inst.control_law;
    conn_310 : data access dataport140 -> blink_inst.controllaw;
    conn_311 : data access dataport140 -> UserInputThreads_inst.proxyControlData;
    conn_312 : data access dataport131 -> UserInputThreads_inst.proxyUiData;
    
    --connections to hardware
    --outgoing connections

	--ccs      : port motors_and_radios.flight_control_commands -> UserInputThreads_inst.flight_control_commands;
	mavconn  : port motors_and_radios.mavlink -> uart5ISR_inst.mavlink;
	motor1   : port px4ioar_inst.motor1 -> motors_and_radios.motor1;
	motor2   : port px4ioar_inst.motor2 -> motors_and_radios.motor2;
	motor3   : port px4ioar_inst.motor3 -> motors_and_radios.motor3;
	motor4   : port px4ioar_inst.motor4 -> motors_and_radios.motor4;
	sensor_conn: feature group sensors <-> sensorsCaptureTask_inst.sensors_in;
    time_conn : port system_time -> UserInputThreads_inst.system_time;
    
  properties 
    SMACCM::OS => "eChronos";
    
  annex resolute {**
    prove memory_safe()
    --prove all_through_connections(this)
    prove execute_soundness()
  **};

end flight_gen_process.impl;



end flight_gen;