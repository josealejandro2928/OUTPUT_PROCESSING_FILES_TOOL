package security_resolute
public
with Resolute_Stdlib;

annex resolute {**

	
	check_mils_policy () <=
	** "Check security constraints" **
	check_mils_general_rules() and check_cwes()

	-------------------------------------------------------------
	--  General security rules
	-------------------------------------------------------------
	check_mils_general_rules () <=
	** "Check general security rules" ** 
	check_buses_connections_same_security_level () and
	check_ports_connections_same_security_level() and
	check_memory_same_security_level () and
	check_runtime_separation_same_security_level () and
	check_threads_level_same_security_level () and
	check_mls_components_definition () and
	check_bouncer () and  
	check_exposed_components ()
	
	--
	--  Rule R0: check that components sharing
	--  a bus have the same security level.
	check_buses_connections_same_security_level () <=
	** "R0: Components sharing a bus have the same security level" ** 
	forall (c : component ) . true
	=> check_buses_connections_component (c) 
	
	check_buses_connections_component (comp : component) <=
	** "Check that component " comp " does not share a bus with a component at a different criticality level" ** 
	forall (src : subcomponents(comp)) . 
		forall (dst : subcomponents(comp)) . 
			forall (connsrc : connections(src)) .
				forall (conndst : connections(dst)) .
					forall (thebus : subcomponents(comp)) .
					connected_to_bus (thebus,connsrc,src) and
					connected_to_bus (thebus,conndst,dst) and
					(src <> dst)
					
	        =>	        
		check_security_level (src,dst)  
	
	--
	--  Rule R1: check that components connected through ports
	--  share the same security level.
	check_ports_connections_same_security_level () <=
	** "R1: Inter-connected components have the same security levels" **
	forall (comp : component) . 
		forall  (conn : connections (comp)) .
		not (property (destination_component (conn), security_properties::trust) = 100) and
		not (property (source_component (conn), security_properties::trust) = 100)
		=> check_conn_security_level (conn)
		 
		
	check_conn_security_level (conn : connection) <=
	** "Check connection " conn **
	   check_security_level (parent (source(conn)), parent (destination(conn)))
		
	--
	--  Rule R2: Processes on the same processor and the same memory component have the same
	--           security level.
	--
	check_memory_same_security_level () <=
	** "R2: Check that processes with different security levels are on separate memories" **
	forall (pr1 : component) (pr2 : component) (cpu : processor) (mem : memory) .
		is_bound_to (pr1, cpu) and is_bound_to (pr1, mem) and
		is_bound_to (pr2, cpu) and is_bound_to (pr2, mem) =>
		check_security_level (pr1,pr2)
 
	--
	--  Rule R3: Processes with different security levels are on different processor/partitions
	--
	check_runtime_separation_same_security_level () <=
	** "R3: Components associated with a processing resource share the same security levels" **
	check_processor_separation_same_security_level() and check_virtual_processor_separation_same_security_level ()

	check_processor_separation_same_security_level () <=
	** "R3: Check that processes on the same processor have the same security level" **
	forall (pr1 : component) (pr2 : component) (cpu : processor) .
		is_bound_to (pr1, cpu) and
		is_bound_to (pr2, cpu) => 
		check_security_level (pr1,pr2)


	check_virtual_processor_separation_same_security_level () <=
	** "R3: Check that components sharing a virtual processor have the same security level)" **
	forall (pr1 : component) (pr2 : component) (vcpu : virtual_processor) .
		is_bound_to (pr1, vcpu) and
		is_bound_to (pr2, vcpu) =>
		check_security_level (pr1,pr2)

		
	--
	--  Rule R4: all threads for a process have the same security levels unless the process is verified
	--
	check_threads_level_same_security_level () <=
	** "R4: Threads inside a process share the same security levels" **
	forall (thr1 : thread) (thr2 : thread) (pr : process) .
		property (pr,security_properties::trust) < 100 and
		parent(thr1) = parent(thr2) =>
		check_security_level (thr1,thr2)


	--
	--  Rule R5: an MLS components has to explicitly define the security level of its ports
	--
	check_mls_components_definition () <=
	** "R5: Check that MLS components explicitly define security levels of their features" **
	forall (comp : component) . 
	  (length (property (comp, security_properties::security_levels)) > 1) and
	  (is_verified (comp) = false)
	=> 
		check_mls_components_definition_comp (comp)
--		forall (f : features (comp)) . true
		
--		length 
--		(intersect (property (comp, security_properties::security_levels),property (f, security_properties::security_levels))) > 0
--		

	check_mls_components_definition_comp (comp : component) <=
	** "R5: Check component: " comp **
	forall (f : features (comp)) . is_port (f)
		=>
		check_security_level (f, comp)
	
	--
	--  Rule R6: check that there is no component that can
	--  lower a security level if the middle component is not verified
	--
	check_bouncer () <=
	** "R6: Check that there is no bouncer component that could relay a message to components with different security levels" ** 
	forall (c : component) . true =>
	check_bouncer_component (c)
	
	
	
	check_bouncer_component (comp : component) <=
	** "R6: Check there is no possible bypass within component " comp ** 
	forall (src : subcomponents(comp)) (middle : subcomponents(comp)) (dst : subcomponents(comp))
			. (not (is_verified_func (middle))) => forall 
			(connsrc : connections(src)) (conndst : connections(dst)) (connmiddle1 : connections(middle)) 
			(connmiddle2 : connections(middle)) (thebus1 : subcomponents(comp)) (thebus2 : subcomponents(comp))
			. 
			
			( is_system (src) or is_processor (src)) and
			( is_system (middle) or is_processor (middle)) and
			( is_system (dst) or is_processor (dst)) and
			( is_bus (thebus1)) and
			( is_bus (thebus2))
			=>
			connected_to_bus (thebus1,connsrc,src) and
			connected_to_bus (thebus1,connmiddle1,middle) and
			connected_to_bus (thebus2,conndst,dst) and
			connected_to_bus (thebus2,connmiddle2,middle) and
			(src <> dst) and
			(src <> middle) and
			(middle <> dst) and  
			(thebus1 <> thebus2) 
	        =>
		check_security_level (src,dst)
	
	--
	--  Rule R7: check encryption for exposed buses. When a bus is physically exposed
	--           connections have to be encrypted.
	--
	check_exposed_components () <=
	** "R7: Check that all exposed connections are encrypted" **
	check_exposed_components_bus () and
	check_exposed_components_virtual_bus ()
	
	check_exposed_components_bus () <=
	** "Check that all connections are bound to a bus that is not exposed" **
	forall (b : bus) (conn : connection) . is_bound_to (conn, b) =>
		property (b, security_properties::exposure) = 0
	
	check_exposed_components_virtual_bus () <=
	** "Check that all connections bound to an exposed virtual bus are encrypted" **
	forall (vb : virtual_bus) (conn : connection). 
		is_bound_to (conn, vb) => use_encryption (vb) or
		use_isolated_bus (vb)
	
	
	
	
	use_isolated_bus (b : component) <=
	** "Check that " b " is using isolation" **
	if (b instanceof virtual_bus) then
		
		(forall (b2 : component) . is_bound_to(b, b2) => use_isolated_bus (b2))
--		(forall (c : component) . true => debug ("plop"))
	else
		debug("there2") and	
		(property (b, security_properties::exposure) = 0)
	

 
		
	

   is_verified(comp : aadl) : bool =
   property(comp, security_properties::trust) = 100
	
	
	use_encryption (vb : virtual_bus) <=
	** "Check if communication layer " vb " is using encryption" **
	has_property (vb, security_properties::encryption)
	or exists (vb2 : virtual_bus) . is_bound_to (vb, vb2) and use_encryption (vb2)


   is_distributed(conn : connection) : bool =
   if is_system(get_component_source (conn)) and (is_system (get_component_destination(conn))) then
      true
   else
      exists (cpu1 : processor) (cpu2 : processor) . 
      is_bound_to(get_component_source (conn), cpu1) and is_bound_to(get_component_destination (conn), cpu2) and (cpu1 <> cpu2)
	
	
	  check_connection_encrypted (c : connection) <=
      ** "Check that connection " c " is using an encryption layer" ** 
       exists (vb : virtual_bus) . use_encryption (vb)
	
	
	--
	--  Rule R8: check encryption requirements. All connections using encryption
	--           have their encryption requirements defined.
	--
	check_encrypted_connections () <=
	** "R8: All Encrypted connections define encryption algorithm on ports" ** 
	forall (conn : connection) . is_distributed(conn) =>
	check_connection_encrypted (conn)
	

	--
	--  Rule R9: if a bus is connected to processors at different security levels
	--           connections using this bus must be encrypted
	--
--	check_bus_connected_components () <=
--	** "R9: Bus shared with nodes at different criticality levels must be encrypted/protected" ** 
--	forall (b : bus) (p1 : processor) (p2 : processor) . 
--		is_connected_to_bus (p1, b) and is_connected_to_bus (p2, b) =>
--			forall (c1 : component) (c2 : component) .
--				processor_bound (c1, p1) and processor_bound (c2, p2) =>
--					check_security_level (
	
	-------------------------------------------------------------
	--  CWE related rules
	-------------------------------------------------------------
	check_cwes () <=
	** "Check that the architecture handles existing common weaknesses" **
		check_cwe131() and 
		check_cwe362() and 
		check_cwe514() and
		check_cwe327() and
		check_cwe311() and
		check_cwe805()
	
	--
	-- CWE-131 - check buffer size
	-- 	 
	check_cwe131 () <=
	** "CWE131: incorrect calculation of buffer size" ** 
	forall (c : component) . is_process (c) or is_system (c) or is_thread (c) =>
	check_connections_queue_size_for_component (c) and check_timing_requirements (c)
	 
	 
	check_connections_queue_size_for_component (c : component) <=
	** "check connections for component " c ** 
	forall (conn : connections (c)) . is_event_data_port_connection (conn) or is_event_port_connection (conn)=>
		check_queue_size_connection (conn)
	 
	check_queue_size_connection (c : connection) <=
	** "check connection " c ** 
	property (source(c), Communication_Properties::Queue_Size) <= property (destination(c), Communication_Properties::Queue_Size)


 	--
 	-- The check_timing_requirements is more than just taking care
 	-- of the queue_size, it also has a look at the period
 	-- of communicating components
	check_timing_requirements (c : component) <=
	** "Check that timing requirements of communication with " c " are consistent" **
	forall (conn : connections (c)) .
		(is_event_data_port_connection (conn) or is_event_port_connection (conn)) and
		has_property (c, Timing_Properties::Period) =>
		check_timing_requirements_connection (conn)
 
	check_timing_requirements_connection (conn : connection) <=
	** "Check timing requirements for connection " conn **
		property (parent(destination(conn)), Timing_Properties::Period) / property (destination (conn), Communication_Properties::Queue_Size)
	 	<=
	 	property (parent(source(conn)), Timing_Properties::Period) 


	--
	-- CWE-362 - race condition
	--
	
	check_cwe362 () <=
	** "CWE362: Concurrent Execution using Shared Resource with Improper Synchronization (Race Condition)" ** 
	forall (c : component) . true =>
	check_cwe362_component (c)
	
	check_cwe362_component (c : component) <=
	** "CWE362: check component " c **
	forall (conn : connections(c)) . is_data_access(conn) =>
	check_cwe362_component_connection (source(conn)) or 
 	check_cwe362_component_connection (destination(conn))
 
  
	check_cwe362_component_connection (d : aadl) <= 
	** "CWE362: check data " d **
	has_property (d , Thread_Properties::Concurrency_Control_Protocol)
 

	--
	-- CWE-514 - covert channel
	--	 
	check_cwe514 () <=
	** "CWE514: There are no covert channel" ** 
	forall (c : component) . true =>
	check_bouncer_component (c)


	--
	-- CWE-327 - use of risky or weak security protocol
	--	 
	check_cwe327 () <=
	** "CWE327: Use of risky or weak security protocol" ** 
	forall (c : component) . true =>
	true
	--  FIXME: we need to get access to a record in resolute to
	--  do that. It means, access to the members of the
	--  encryption property.
	--  Pending bug #40 in smaccm
	--  https://github.com/smaccm/smaccm/issues/40
	
	
	
	
	--
	--  CWE-805: buffer access with incorrect length value
	--  For this one, we assume that types used between interacting
	--  components do not match. So, we add a rule to check
	--  that data are consistent.
	--
	--  This is now implemented for integer and float. Support
	--  for arrays is included but limited.
	--
	--  To be checked, pending on bug #645 in osate
	--  https://github.com/osate/osate2-core/issues/645
	--
	check_cwe805 () <=
	** "CWE805: Buffer Access with Incorrect Length Value" ** 
	forall (c : component) . true =>
	check_cwe805_component (c)
	
	
	check_cwe805_component (c : component) <=
	** "Check data types for connections in component " c ** 
	forall (conn : connections (c)) . is_port_connection(conn) and is_data_port_connection(conn) =>
	check_data_properties_definition (type(source (conn))) and  
	check_data_properties_definition (type(destination (conn))) and 
	check_data_properties_consistencies (type(source (conn)), type(destination (conn)))
	
	check_data_properties_definition (thedata : aadl) <=
	** "Data type " thedata " is correctly specified (representation and range)" **
	has_property (thedata,Data_Model::Data_Representation)
	andthen if (property(thedata,Data_Model::Data_Representation) = "Integer")
	        then 
				has_property(thedata,Data_Model::Integer_Range) and has_property(thedata,Data_Model::Number_Representation)
			else
				if (property(thedata,Data_Model::Data_Representation) = "float")
		        then 
					has_property(thedata,Data_Model::Real_Range) and has_property(thedata,Data_Model::Number_Representation)
				else
					if (property(thedata,Data_Model::Data_Representation) = "Array")
			        then 
						has_property(thedata,Data_Model::MyDimension)
					else
						false
	
	check_data_properties_consistencies (thedata1 : aadl, thedata2 : aadl) <=
	** "Data types " thedata1 " and " thedata2 " are consistent" **
	(property (thedata1,Data_Model::Data_Representation) = property (thedata2,Data_Model::Data_Representation))
	andthen if (property(thedata1,Data_Model::Data_Representation) = "integer")
	        then 
	        	(property (thedata1,Data_Model::Integer_Range) = property (thedata2,Data_Model::Integer_Range))
	        	and
	        	(property (thedata1,Data_Model::Number_Representation) = property (thedata2,Data_Model::Number_Representation))
			else
				if (property(thedata1,Data_Model::Data_Representation) = "float")
		        then 
			        (property (thedata1,Data_Model::Real_Range) = property (thedata2,Data_Model::Real_Range))
		        	and
		        	(property (thedata1,Data_Model::Number_Representation) = property (thedata2,Data_Model::Number_Representation))
				else
				if (property(thedata1,Data_Model::Data_Representation) = "array")
		        then 
					(property (thedata1,Data_Model::MyDimension) = property (thedata2,Data_Model::MyDimension))
				else
					false
	
	--
	-- CWE-311: Check that all critical data are encrypted 
	--
	
	check_cwe311 () <=
	** "CWE311: Missing Encryption of Sensitive Data" ** 
	forall (c : component) . true =>
	check_cwe311_component (c)
	

	--  We just check that the source defines the security encryption.
	--  
	check_cwe311_component (c : component) <=
	** "Check that all critical data are encrypted in component " c ** 
	forall (conn : connections (c)) .
		is_port_connection (conn)  =>
			check_connection_encrypted (conn) and check_cwe311_connection (conn)
	
	check_cwe311_connection (conn : connection) <=
	** "Check encryption of connection " conn ** 
	(is_unclassified (parent (source (conn)))) or
	(is_verified_func (parent(source(conn))) and is_unclassified (parent(destination (conn)))) or
	(is_verified (parent(destination(conn))))
	
	
	  
--	check_encryption_mechanism (c)

--  The list of potential good/weak encryption mechanisms
--  are listed here: https://www.owasp.org/index.php/Guide_to_Cryptography#Algorithm_Selection

--	check_encryption_mechanism (c : component) <=
--	** "Check that encryption mechanisms for component " c " are not weak" **
--	forall (conn : connections(c)) . true =>
--	has_property (conn, security_properties::encryption_type)
	-- To be completed, need to support record in RESOLUTE
	
	--
	--  Utility functions
	--	 
	
	
	is_unclassified(comp : aadl) : bool =
--    (print_aadl (thebus)) and
  		(length (property(comp, security_properties::security_levels)) = 1)
		and (member (100,property(comp, security_properties::security_levels)))
	 

 
  	--  Pending bug #40 in smaccm
  	use_weak_encryption(feat : aadl) : bool =
--    (print_aadl (thebus)) and
  	false
	  
	 
   connected_to_bus(thebus : component, conn : connection, b : component) : bool =
--    (print_aadl (thebus)) and
  	((source(conn) = thebus) and (parent(destination(conn)) = b))
  	or ((destination(conn) = thebus) and (parent(source(conn)) = b))

	is_connected_to_bus (comp : component, thebus : bus) : bool =
		exists (c : connections (comp)) . connected_to_bus (thebus, c, comp)
	
--   	is_verified(comp : component) <=
--   	** "Component " comp " has been verified" **
--	if (is_process (comp) or is_system (comp) or is_thread (comp)) then
--		property (comp, security_properties::is_verified)
--	else 
--		if (is_processor (comp) or (is_virtual_processor (comp))) then
--			forall (c : component) . is_bound_to (c, comp) =>
--				is_verified (c)
--		else
--			false 

   is_component (entity : aadl) : bool =
      (is_process(entity) or 
       is_thread (entity) or
       is_system (entity) or
       is_device (entity) or 
       is_bus (entity))
      
   

   get_component_source (conn : connection) : aadl =
      if (is_component (source (conn))) then source(conn)
      else
         parent (source(conn))
         
   get_component_destination (conn : connection) : aadl =
      if (is_component (destination (conn))) then destination(conn)
      else
         parent (destination(conn))
   

   is_verified_func(comp : aadl) : bool =
--    (print_aadl (thebus)) and
		if (is_processor (comp) or (is_virtual_processor (comp))) then
			forall (c : component) . is_bound_to (c, comp) =>
--				debug( "processor", comp)  and is_verified_func (c)
				is_verified_func (c)  
		else
			(property (comp, security_properties::trust) = 100)
--			if( property (comp, security_properties::is_verified)) then
--				debug( "verified", comp) and true
--			else
--				debug( "NOT verified", comp) and false
	  
	print_empty() <= ** "" ** true
	
	print_comp(c : component) <=
	  ** c **
	  true
	
	print_aadl(a : aadl) <=
	  ** a **
	  true
	  
	print_set(s : {aadl}) <=
	  ** s **
	  true
 

	check_security_level (comp1 : aadl, comp2 : aadl) <=
	** "Component " comp1 " and " comp2 " have the same security level(s)" **
		true 
	 => debug("check security level", comp1, comp2) and 
	( length(property (comp1, security_properties::security_levels)) = length(property (comp2, security_properties::security_levels)))
	 and
	 	(length(intersect (property (comp1, security_properties::security_levels),
	 	            property (comp2, security_properties::security_levels)))
	      = length(property (comp2, security_properties::security_levels)))
		
**};
end security_resolute;
