package SW
public
	with Drivers;
	with Waterways_UxAS;
    with CASE_Model_Transformations;
    
    with CASEAgree;
    with CASEConsts;
	with CMASI; 
	with Base_Types;
	with Data_Types;
	with Agree_Constants;
	with Agree_Nodes;
	with CASE_Consolidated_Properties;	

	thread WaypointManager
		features
			ReturnHome: in event port;
			AutomationResponse: in event data port CMASI::AutomationResponse.i;
			AirVehicleState: in event data port CMASI::AirVehicleState.i;
			MissionCommand: out event data port CMASI::MissionCommand.i;
--		annex agree {**
--			guarantee Req_WPM_Good_Mission_Command "The Waypoint Manager shall output valid mission commands" : CASEAgree::WELL_FORMED_MISSION_COMMAND(MissionCommand);
--		**};
		annex Verdict{**
			CyberRel "MissionCommand_C" = AutomationResponse:C => MissionCommand:C;
			CyberRel "MissionCommand_I" = AutomationResponse:I => MissionCommand:I;
			CyberRel "MissionCommand_A" = AutomationResponse:A => MissionCommand:A;
		
		**};
	

	end WaypointManager;

	thread implementation WaypointManager.Impl
--		properties
--			Dispatch_Protocol => Sporadic;
	end WaypointManager.Impl;

	thread FlyZones
		-- The KeepInZoneDatabase is a collection of polygons that represent areas on a map that the UAV can traverse.
		-- The database is populated at build-time and stored in memory.
		features
			KeepInZone: out data port CMASI::Polygon.i;
			KeepOutZone: out data port CMASI::Polygon.i;
	end FlyZones;

	thread implementation FlyZones.Impl
--		properties
--			Dispatch_Protocol => Periodic;
--			Period => 500ms;
	end FlyZones.Impl;
		    
	process SW
        features
	       uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
           uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
           radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
           radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;

           uxas_out: out event data port; --AM added
                            
        annex agree {**
            guarantee Req001_SW "The radio_send outputs only well formed CASE_RF_Msg.Impl types" : 
                CASEAgree::WellformedCASE_RF_Msg(radio_send, CASEConsts::UAV_ID, CASEConsts::GS_ID);
            guarantee Req002_SW "The uart_send outputs only well formed CASE_RF_Msg.Impl types" : 
                CASEAgree::WellformedCASE_UART_Msg(uart_send);
        **};
            
	end SW;
			
	process implementation SW.Impl
	   subcomponents
           FC_UART: thread Drivers::UARTDriver.Impl
			{
				-- VERDICT Component Properties
				CASE_Consolidated_Properties::canReceiveSWUpdate => true;
				CASE_Consolidated_Properties::componentType => Software;
				CASE_Consolidated_Properties::hasSensitiveInfo => false;
				CASE_Consolidated_Properties::insideTrustedBoundary => true;
				CASE_Consolidated_Properties::pedigree => InternallyDeveloped; 
			};
           RADIO: thread Drivers::RadioDriver.Impl
			{
				-- VERDICT Component Properties
				CASE_Consolidated_Properties::canReceiveSWUpdate => true;
				CASE_Consolidated_Properties::componentType => Software;
				CASE_Consolidated_Properties::hasSensitiveInfo => false;
				CASE_Consolidated_Properties::insideTrustedBoundary => true;
				CASE_Consolidated_Properties::pedigree => InternallyDeveloped; 
			};
           UXAS: thread group Waterways_UxAS::Waterways.i 
--			{
--				-- VERDICT Component Properties
--				CASE_Consolidated_Properties::canReceiveSWUpdate => true;
--				CASE_Consolidated_Properties::componentType => Software;
--				CASE_Consolidated_Properties::hasSensitiveInfo => false;
--				CASE_Consolidated_Properties::insideTrustedBoundary => true; --AM made it true
--				CASE_Consolidated_Properties::pedigree => COTS; 
--			}
			;
		connections
		   ------------------
	       -- Primary Inputs
	       ------------------
		   c01: port uart_recv -> FC_UART.recv_data;
		   c02: port radio_recv -> RADIO.recv_data;
		    	           
		   ----------- 	           
           -- FC_UART
           -----------
           c03: port FC_UART.send_data -> uart_send;
           c05: port FC_UART.AirVehicleState -> UXAS.AirVehicleState;
           c06: port FC_UART.AirVehicleState -> RADIO.AirVehicleState;
           
           ---------
           -- RADIO
           ---------
           c07: port RADIO.send_data -> radio_send;
           c08: port RADIO.AutomationRequest -> UXAS.AutomationRequest; 
           c_r_09: port RADIO.OperatingRegion -> UXAS.OperatingRegion;
           c_r_10: port RADIO.LineSearchTask -> UXAS.LineSearchTask;	
            
           --------
           -- UXAS
           --------
           c09: port UXAS.MissionCommand -> FC_UART.MissionCommand;
           c12: port UXAS.AutomationResponse -> RADIO.AutomationResponse;
               
	end SW.Impl;
	
end SW;