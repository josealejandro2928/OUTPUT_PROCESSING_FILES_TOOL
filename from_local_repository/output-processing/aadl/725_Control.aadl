package Control
public
  with Base_Types;
  with TowerArrays;
  with gcsstream_timing;
  with mavlink_veh_commsec_msg;
  with att_control_dbg_type;
  with alt_control_dbg_type;
  with radio_stat_type;
  with motors_type;
  with controloutput_type;
  with gps_type;
  with sensors_type;
  with control_law_type;
  with mavlink_rc_channels_override_msg;
  with control_law_request_type;
  with mavlink_hil_state_msg;
  with SMACCM;
  with SMACCM_SYS;
  with userinput_type;
  with SMACCM_DATA;


thread group ControlThreads
  features
	contParams : requires data access SMACCM_DATA::control_params.impl;
	sensors: requires data access sensors_type::sensors_result.impl ;
    userinput: requires data access userinput_type::userinput_result.impl;
    control_law: requires data access control_law_type::control_law.impl; 
    control: out event data port controloutput_type::controloutput.impl;
    att_control: requires data access att_control_dbg_type::att_control_dbg.impl;
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl;
	proxyData: requires data access controloutput_type::controloutput.impl;
	
end ControlThreads;

thread group implementation ControlThreads.impl
  subcomponents
    control_inst : thread control;
    control_state_inst : thread control_state;
    
  connections
 
    conn_params : port contParams -> control_inst.control_params;
    conn_307 : data access sensors -> control_inst.sensors;
    conn_308 : port userinput -> control_inst.userinput; 
    conn_309 : port control_law -> control_inst.control_law;
    conn_271 : data access att_control -> control_inst.att_control_dbg;
    conn_272 : data access alt_control -> control_inst.alt_control_dbg;
    
    conn_28 : port control_inst.control -> control_state_inst.proxyEvent;
    conn_proxy : data access proxyData -> controL_state_inst.proxyData;
    
end ControlThreads.impl;

thread control_state
  features
    proxyEvent: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_298.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_control_state_298_chan38_302";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_state_298_chan38_305");
    };
    proxyData: requires data access controloutput_type::controloutput.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_298.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_state_298_dataport297_300";
    };
  properties
    Source_Text => ("tower_task_usercode_control_state_298.c");
    Priority => 17;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end control_state;


thread control
  features
    control: out event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_control_157_chan38_165";
    };
    att_control_dbg: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_157_dataport40_261";
    };
    alt_control_dbg: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_157_dataport39_257";
    };
    
    control_params: in event data port SMACCM_DATA::control_params.impl;
    
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport0_163";
    };
    userinput: in data port userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport131_161";
    };
    control_law: in data port control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_157.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_157_dataport140_159";
    }; 
  properties
    Source_Text => ("tower_task_usercode_control_157.c");
    Priority => 19;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_157_per5_286");
    
--  annex agree {**
--  	
--  	const armed : int = 2;
--  	const pi : real = 3.14159;
--  	--TODO: figure out constant param values
--  	const PRUISens : real = 50.0;
--  	const ui_sens_rads : real = PRUISens * pi / 180.0;
--  	
--  	eq pitch_rads : real = userinput.pitch * ui_sens_rads;
--  	eq roll_rads : real = userinput.roll * ui_sens_rads;
--  	
--  	eq prc_control : AGREE_PID.PitchRollPID;
--  	
--  	guarantee "reset pitch roll if not armed" :
--  	  control_law.armed_mode != armed => prc_control = AGREE_PID.prc_reset(prc_control);
--  **};
end control;

end Control;