package Sensor_System
public
with Base_Types; 
	renames Base_Types::all;
with Radiation_Ctrl;
with Temperature_Ctrl;
with Pressure_Ctrl;
with constants;
	
	system SensorSys
		features
			env_radiation: in data port Integer;
			env_pressure : in data port Integer;
			env_temperature : in data port Integer;
			
			shutdown: out data port Boolean;
		
		annex agree{**
			
			assume "Temp is in a reasonable range (C)." :
				env_temperature > 0 and env_temperature < 500;
			
			guarantee "If temp is over threshold, then we shut down.":
				env_temperature > constants::TEMP_THRESHOLD -> shutdown;
				
		**};
			
	end SensorSys;
	
	system implementation SensorSys.impl
		subcomponents
			radiation : system Radiation_Ctrl::Radiation_Ctrl.impl;
			pressure : system Pressure_Ctrl::Pressure_Ctrl.impl;
			temp : system Temperature_Ctrl::Temperature_Ctrl.impl;
			
		connections
			radiation_to_subsys : port env_radiation -> radiation.env_radiation;
			radiation_shutdown_cmd : port radiation.shutdown -> shutdown;
			temp_to_subsys : port env_temperature -> temp.env_temperature;
			temp_shutdown_cmd : port temp.shutdown -> shutdown;
			pressure_to_subsys : port env_pressure -> pressure.env_pressure;
			pressure_shutdown_cmd : port pressure.shutdown -> shutdown;
		
		annex agree {**
			connection radiation_shutdown_cmd: true;
			connection temp_shutdown_cmd: true;	
			connection pressure_shutdown_cmd: true;
			
			assign shutdown = radiation.shutdown or temp.shutdown or pressure.shutdown;		    						
		**};	
	end SensorSys.impl;
	
end Sensor_System;